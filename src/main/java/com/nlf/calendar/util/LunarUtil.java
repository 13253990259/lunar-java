package com.nlf.calendar.util;

import java.util.*;

/**
 * 农历工具，基准日期为1900年十一月十一，对应阳历1901年1月1日，最远仅支持到2099年
 *
 * @author 6tail
 *
 */
public class LunarUtil{
  /** 农历基准年 */
  public static final int BASE_YEAR = 1900;
  /** 农历基准月 */
  public static final int BASE_MONTH = 11;
  /** 农历基准日 */
  public static final int BASE_DAY = 11;
  /** 农历与阳历年偏移量 */
  public static final int BASE_INDEX = 0;
  /** 基准对应的年干支偏移量 */
  public static final int BASE_YEAR_GANZHI_INDEX = -4;
  /** 基准对应的日干支偏移量 */
  public static final int BASE_DAY_GANZHI_INDEX = 15;
  /** 月份地支偏移量，因正月起寅 */
  public static final int BASE_MONTH_ZHI_INDEX = 2;
  /** 星期偏移量 */
  public static final int BASE_WEEK_INDEX = 2;
  /** 闰年表 */
  public static final int[] LEAP_MONTH_YEAR = {6,14,19,25,33,36,38,41,44,52,55,79,117,136,147,150,155,158,185,193};
  /** 闰月表 */
  public static final int[] LUNAR_MONTH = {0x00,0x04,0xad,0x08,0x5a,0x01,0xd5,0x54,0xb4,0x09,0x64,0x05,0x59,0x45,0x95,0x0a,0xa6,0x04,0x55,0x24,0xad,0x08,0x5a,0x62,0xda,0x04,0xb4,0x05,0xb4,0x55,0x52,0x0d,0x94,0x0a,0x4a,0x2a,0x56,0x02,0x6d,0x71,0x6d,0x01,0xda,0x02,0xd2,0x52,0xa9,0x05,0x49,0x0d,0x2a,0x45,0x2b,0x09,0x56,0x01,0xb5,0x20,0x6d,0x01,0x59,0x69,0xd4,0x0a,0xa8,0x05,0xa9,0x56,0xa5,0x04,0x2b,0x09,0x9e,0x38,0xb6,0x08,0xec,0x74,0x6c,0x05,0xd4,0x0a,0xe4,0x6a,0x52,0x05,0x95,0x0a,0x5a,0x42,0x5b,0x04,0xb6,0x04,0xb4,0x22,0x6a,0x05,0x52,0x75,0xc9,0x0a,0x52,0x05,0x35,0x55,0x4d,0x0a,0x5a,0x02,0x5d,0x31,0xb5,0x02,0x6a,0x8a,0x68,0x05,0xa9,0x0a,0x8a,0x6a,0x2a,0x05,0x2d,0x09,0xaa,0x48,0x5a,0x01,0xb5,0x09,0xb0,0x39,0x64,0x05,0x25,0x75,0x95,0x0a,0x96,0x04,0x4d,0x54,0xad,0x04,0xda,0x04,0xd4,0x44,0xb4,0x05,0x54,0x85,0x52,0x0d,0x92,0x0a,0x56,0x6a,0x56,0x02,0x6d,0x02,0x6a,0x41,0xda,0x02,0xb2,0xa1,0xa9,0x05,0x49,0x0d,0x0a,0x6d,0x2a,0x09,0x56,0x01,0xad,0x50,0x6d,0x01,0xd9,0x02,0xd1,0x3a,0xa8,0x05,0x29,0x85,0xa5,0x0c,0x2a,0x09,0x96,0x54,0xb6,0x08,0x6c,0x09,0x64,0x45,0xd4,0x0a,0xa4,0x05,0x51,0x25,0x95,0x0a,0x2a,0x72,0x5b,0x04,0xb6,0x04,0xac,0x52,0x6a,0x05,0xd2,0x0a,0xa2,0x4a,0x4a,0x05,0x55,0x94,0x2d,0x0a,0x5a,0x02,0x75,0x61,0xb5,0x02,0x6a,0x03,0x61,0x45,0xa9,0x0a,0x4a,0x05,0x25,0x25,0x2d,0x09,0x9a,0x68,0xda,0x08,0xb4,0x09,0xa8,0x59,0x54,0x03,0xa5,0x0a,0x91,0x3a,0x96,0x04,0xad,0xb0,0xad,0x04,0xda,0x04,0xf4,0x62,0xb4,0x05,0x54,0x0b,0x44,0x5d,0x52,0x0a,0x95,0x04,0x55,0x22,0x6d,0x02,0x5a,0x71,0xda,0x02,0xaa,0x05,0xb2,0x55,0x49,0x0b,0x4a,0x0a,0x2d,0x39,0x36,0x01,0x6d,0x80,0x6d,0x01,0xd9,0x02,0xe9,0x6a,0xa8,0x05,0x29,0x0b,0x9a,0x4c,0xaa,0x08,0xb6,0x08,0xb4,0x38,0x6c,0x09,0x54,0x75,0xd4,0x0a,0xa4,0x05,0x45,0x55,0x95,0x0a,0x9a,0x04,0x55,0x44,0xb5,0x04,0x6a,0x82,0x6a,0x05,0xd2,0x0a,0x92,0x6a,0x4a,0x05,0x55,0x0a,0x2a,0x4a,0x5a,0x02,0xb5,0x02,0xb2,0x31,0x69,0x03,0x31,0x73,0xa9,0x0a,0x4a,0x05,0x2d,0x55,0x2d,0x09,0x5a,0x01,0xd5,0x48,0xb4,0x09,0x68,0x89,0x54,0x0b,0xa4,0x0a,0xa5,0x6a,0x95,0x04,0xad,0x08,0x6a,0x44,0xda,0x04,0x74,0x05,0xb0,0x25,0x54,0x03};
  /** 天干 */
  public static final String[] GAN = {"","甲","乙","丙","丁","戊","己","庚","辛","壬","癸"};
  /** 喜神方位，《喜神方位歌》：甲己在艮乙庚乾，丙辛坤位喜神安.  丁壬只在离宫坐，戊癸原在在巽间。 */
  public static final String[] POSITION_XI = {"","艮","乾","坤","离","巽","艮","乾","坤","离","巽"};
  /** 阳贵方位，《阳贵神歌》：甲戊坤艮位，乙己是坤坎，庚辛居离艮，丙丁兑与乾，震巽属何日，壬癸贵神安。 */
  public static final String[] POSITION_YANG_GUI = {"","坤","坤","兑","乾","艮","坎","离","艮","震","巽"};
  /** 阴贵方位，《阴贵神歌》：甲戊见牛羊，乙己鼠猴乡，丙丁猪鸡位，壬癸蛇兔藏，庚辛逢虎马，此是贵神方。 */
  public static final String[] POSITION_YIN_GUI = {"","艮","坎","乾","兑","坤","坤","艮","离","巽","震"};
  /** 福神方位，参考多个黄历而决定采用的《福神方位歌》：甲乙东南是福神，丙丁正东是堪宜，戊北己南庚辛坤，壬在乾方癸在西。 */
  public static final String[] POSITION_FU = {"","巽","巽","震","震","坎","离","坤","坤","乾","兑"};
  //未采用的《福神方位歌》：甲己正北是福神，丙辛西北乾宫存，乙庚坤位戊癸艮，丁壬巽上好追寻。
  //public static final String[] POSITION_FU = {"","坎","坤","乾","巽","艮","坎","坤","乾","巽","艮"};
  /** 财神方位，《财神方位歌》：甲乙东北是财神，丙丁向在西南寻，戊己正北坐方位， 庚辛正东去安身，壬癸原来正南坐，便是财神方位真。 */
  public static final String[] POSITION_CAI = {"","艮","艮","坤","坤","坎","坎","震","震","离","离"};
  /** 逐日胎神方位 */
  public static final String[] POSITION_TAI_DAY = {"占门碓外东南","碓磨厕外东南","厨灶炉外正南","仓库门外正南","房床厕外正南","占门床外正南","占碓磨外正南","厨灶厕外西南","仓库炉外西南","房床门外西南","门鸡栖外西南","碓磨床外西南","厨灶碓外西南","仓库厕外西南","房床厕外正南","房床炉外正西","碓磨栖外正西","厨灶床外正西","仓库碓外西北","房床厕外西北","占门炉外西北","碓磨门外西北","厨灶栖外西北","仓库床外西北","房床碓外正北","占门厕外正北","碓磨炉外正北","厨灶门外正北","仓库栖外正北","占房床房内北","占门碓房内北","碓磨厕房内北","厨灶炉房内北","仓库门房内北","门鸡栖外西南","占门床房内南","占碓磨房内南","厨灶厕房内南","仓库炉房内南","房床门房内南","门鸡栖房内东","碓磨床房内东","厨灶碓房内东","仓库厕房内东","房床炉房内东","占大门外东北","碓磨栖外东北","厨灶床外东北","仓库碓外东北","房床厕外东北","占门炉外东北","碓磨门外正东","厨灶栖外正东","仓库床外正东","房床碓外正东","占门厕外正东","碓磨炉外东南","仓库栖外东南","占房床外东南","占门碓外东南"};
  /** 逐月胎神方位 */
  public static final String[] POSITION_TAI_MONTH = {"占房床","占户窗","占门堂","占厨灶","占身床","占床仓","占碓磨","占厕户","占门房","占房床","占炉灶","占房床"};
  /** 地支 */
  public static final String[] ZHI = {"","子","丑","寅","卯","辰","巳","午","未","申","酉","戌","亥"};
  /** 六十甲子 */
  public static final String[] JIA_ZI = {"甲子","乙丑","丙寅","丁卯","戊辰","己巳","庚午","辛未","壬申","癸酉","甲戌","乙亥","丙子","丁丑","戊寅","己卯","庚辰","辛巳","壬午","癸未","甲申","乙酉","丙戌","丁亥","戊子","己丑","庚寅","辛卯","壬辰","癸巳","甲午","乙未","丙申","丁酉","戊戌","己亥","庚子","辛丑","壬寅","癸卯","甲辰","乙巳","丙午","丁未","戊申","己酉","庚戌","辛亥","壬子","癸丑","甲寅","乙卯","丙辰","丁巳","戊午","己未","庚申","辛酉","壬戌","癸亥"};
  /** 十二值星 */
  public static final String[] ZHI_XING = {"","建","除","满","平","定","执","破","危","成","收","开","闭"};
  /** 十二天神 */
  public static final String[] TIAN_SHEN = {"","青龙","明堂","天刑","朱雀","金匮","天德","白虎","玉堂","天牢","玄武","司命","勾陈"};
  /** 宜忌 */
  public static final String[] YI_JI = {"祭祀","祈福","求嗣","开光","塑绘","齐醮","斋醮","沐浴","酬神","造庙","祀灶","焚香","谢土","出火","雕刻","嫁娶","订婚","纳采","问名","纳婿","归宁","安床","合帐","冠笄","订盟","进人口","裁衣","挽面","开容","修坟","启钻","破土","安葬","立碑","成服","除服","开生坟","合寿木","入殓","移柩","普渡","入宅","安香","安门","修造","起基","动土","上梁","竖柱","开井开池","作陂放水","拆卸","破屋","坏垣","补垣","伐木做梁","作灶","解除","开柱眼","穿屏扇架","盖屋合脊","开厕","造仓","塞穴","平治道涂","造桥","作厕","筑堤","开池","伐木","开渠","掘井","扫舍","放水","造屋","合脊","造畜稠","修门","定磉","作梁","修饰垣墙","架马","开市","挂匾","纳财","求财","开仓","买车","置产","雇庸","出货财","安机械","造车器","经络","酝酿","作染","鼓铸","造船","割蜜","栽种","取渔","结网","牧养","安碓磑","习艺","入学","理发","探病","见贵","乘船","渡水","针灸","出行","移徙","分居","剃头","整手足甲","纳畜","捕捉","畋猎","教牛马","会亲友","赴任","求医","治病","词讼","起基动土","破屋坏垣","盖屋","造仓库","立券交易","交易","立券","安机","会友","求医疗病","诸事不宜","馀事勿取","行丧","断蚁","归岫","无"};
  /** 每日宜忌数据 */
  public static final String DAY_YI_JI = "30=192531010D:838454151A4C200C1E23221D212726,030F522E1F00=2430000C18:8319000776262322200C1E1D,06292C2E1F04=32020E1A26:791715795B0001025D,0F522E38201D=162E3A0A22:790F181113332C2E2D302F157954,7001203810=0E1A263202:79026A176576036A,522E201F05=0D19250131:7911192C2E302F00030401060F1571292A75,707C20522F=0C18243000:4F2C2E2B383F443D433663,0F01478A20151D=0E1A320226:3840,0001202B892F=14202C3808:3807504089,8829=0E1A263202:383940,6370018A75202B454F6605=32020E1A26:38394089,0001202B22=16223A0A2E:384C,8A2020=2B3707131F:2C2E5B000739337C38802D44484C2425201F1E272621,5229701535=121E2A3606:2C2E2D2B156343364C,0F4729710D708A20036A1904=0D19250131:5040262789,0F7129033B=202C380814:5040000738,0F7D7C584F012063452B35=1A2632020E:50400089,8813=1A2632020E:69687011180F791966762627201E,0352292E8034=182430000C:291503000D332E53261F2075,0F5238584F450B=000C182430:297170192C2E2D2F2B3E363F4C,0F52156320010347200B=131F2B3707:297115030102195283840D332C2E,0F1F5863201D8A02=222E3A0A16:261F1E20232289,52290058363F32=16222E3A0A:261F201E232289,8D39=0D19310125:262322271E201D21,52450F4F09=0D19253101:262322271E202189,1F4526=16222E3A0A:262322271F1E20,712906=0F1B273303:17262322274050,80387C6B2C=0915212D39:1707702C2E71291F20,0F52000106111D15=16222E3A0A:170007386A7448363F261F1E,030F79636F2026=030F1B2733:1784832C2E5B26201F,0F010D2913=182430000C:175447440D15838477656A49,2B2E1F8A202228=101C283404:70504C7889,8803=0D19250131:700F181126151E20001A7919,8D2F=0915212D39:705283845B0D2F71,0F202E4106=3606121E2A:70786289,06802E1F23=1824000C30:70076A363F,292017=202C380814:700718111A302F717566,0F2B2E2026=3B0B17232F:70545283842E71291A7933192A5D5A5040,090C384F45208A1D6B38=212D390915:7039170F45513A2C2E7129242526271F201D,00010352153A=15212D3909:703911170E2C2E2D2F4B15712952633D,092B8A2027=010D192531:702D155483840F63262720,53292F017D4F38442B2E1F4717=16222E3A0A:705C4C39171A4F0E7971295B4C5248,0F2E1F1D37=1A2632020E:2E260F27201F,523815292F1A22=0E1A260232:64262322271F2021,0F2F293822=2F3B0B1723:161A0F1526271F4C,586103473818=2430000C18:161A7889,292E1F0F386131=17232F3B0B:04795B3F651A5D,0F5201062016=14202C3808:04170F79195D1A637566363F76,01522E8A2039=132B37071F:0470170F191A134C8384662426232227201E,8D08=0D19253101:040370181123220F1326271E2021,29153B=0D19310125:040307177938494C,0F26207017=0E2632021A:0403010218111A17332C2E2D2B15713E6575,45382064291D=142C380820:04033918110F0D2C2E7129332D2B72528384547566,8D1C=1830000C24:040318111A17332C15290D200C7A,4745063835=0F2733031B:040318111A16175B795452848315302F6563395D,387029202E=14202C3808:04031975363F6366,0F5401202C5283842E2F1E=0E1A320226:0403080618111A16332E2F152A09537919702C5445490D75072B,8063203820=182430000C:04067033392C7161262322271E1D210C,8D2F=101C283404:3F4889,881C=2733030F1B:3F74397677658988,0F3847201D=293505111D:3F8B657789,0F2029702E7D35=111D293505:3F8B6589,1F200A=020E1A2632:3F656477,0F2B71292005=111D290535:3F6589,8810=0F1B273303:3F88,2B38200F1C=293505111D:0F83843D363F776424,15462F2C52032971152A=0F1B273303:0F17795B54838458,52807C3811=121E2A3606:0F172C2E387129363F7566512C2E2D4E4461,01034752203A=172F3B0B23:0F171511793F76584C,0347200C1D20=2D39091521:0F175B3975660745514F2B4825201E211D,010352292E2E=0F1B273303:0F170070792C2E261F,040341232228=05111D2935:0F1700707129385C363F3D1F1E232226,80412B202F14=14202C3808:0F17000728705448757A,522E1F15562F05=30000C1824:0F17000102061979454F3A15477677,241F8A2021=2F3B0B1723:0F17000102060370392E52838453331F,452F2C266A79292B203810=0C18243000:0F170001020E032A70692C2E302F802D2B0D7129474C201F2322,5211183809615D34=1A2632020E:0F171170792F5B1566770001032C2B802D,29387C207134=14202C3808:0F0D33000103452E528384297115752620,63386F7014=15212D3909:0F7045332C2E71201F1D21,4701155229530327=101C283404:0F70161715232238838426271F20,7D035219=121E2A3606:0F705B0004037C5D15653F1F26,522B473809=131F2B0737:0F705215261E20,012E1F25=182430000C:0F707B7C00012F75,52201B=2531010D19:0F706A151E201D528384544466,47010C2E292F2C3820=14202C3808:0F707500261E20,382E1F05=3606121E2A:0F161A17452F0D33712C2E2B5443633F,150170208A0327=0E1A263202:0F150370002E0D3979528384532971331F1E20,477D0D=06121E2A36:0F5B8370000102060403161A494447,386A418A201A=17232F3B0B:0F03700D332C2E2971152F52838463,01004547380C26=101C283404:0F03700D33195284835329711563,01260038206B0E=131F2B3707:0F03706A4F0D332C528384532E29711563,450075000F=131F2B3707:0F0370010239332E2C19528384532971156375262720,8D18=17232F3B0B:0F0370390D332C192E2971637547202322,581528=0E1A263202:0F0302791566046F,29710D722A38528384202E4530=0E1A263202:0F030102392E15634447001F1E,293845200D707538=1E2A360612:0F0300017039712952542D2C302F80380D2A363F3349483E616320,1118150C1F2E20=33030F1B27:0F03000102700D29713963451F0C20,528338542F15806128=121E2A3606:0F030001027039452971150D332C2F6327,2052838403=2C38081420:0F030001022A0D3945297115528384630D7020,476A382E1F4426=010D192531:0F03390D332C1929711563261D2E2322,382000521118750C706B15=131F2B3707:0F033915666A52261E272048,382E2F6329712C0114=0D19253101:0F52838403700D332C29712E1F27201E2322,1545017505=131F2B3707:0F528400012E7129,092026=3707131F2B:0F528471295B795D2B155333565A446375661F201E272621,00016B0C4113=14202C3808:0F280001363F8B4326232220,2E1F47032F7D35=16222E3A0A:0F0211195465756679,2F384570202B6A10=15212D3909:0F0102700D332C2E2F0319528384531529716345261F2322,8D32=101C283404:0F0102037039330D5284832971152E1F0C,0026206B37=16222E3A0A:0F003854,20521D2106=020E1A2632:0F00175058,5D6B80382E16=1B2733030F:0F00701784831952712C2E1526271F,033806201F=2B3707131F:0F00701A17830E544C5C0E78,7129632E1F38208A452F16=15212D3909:0F00040370396A742E15444948,458A384F2021=16222E3A0A:0F005B261F20,2E2F1D=2531010D19:0F0003450D3329712C2E2F1575,528A63705A20587D7C12=17232F3B0B:0F00030D70332C2E3952838453542971156375,6B2019=1B2733030F:0F000301020D297115332E1F0C,165220262E=121E2A3606:0F00030102700D332E2C192971155383846375261F1E20,8D1F=33030F1B27:0F00030102700D19297115332C2B535448,2E45208A00=2632020E1A:0F00030102705283842E544779,2920454F754C3836=16222E3A0A:0F0052037029710D332C15,7545584F8A201D2121=121E2A3606:0F00074850,8A2036=0D25310119:0F00071A706A717677492923221E202726,80522E1F39=1E2A360612:0F006A385040740717,1F70631E=212D390915:0F006A1938271779,565A4575522F801F1E632B=121E2A3606:0F00010D0302703352838453297115632E,208A454F2B=0E1A263202:0F000170390D332E2971152F63751F1E20,52846A381F=14202C3808:0F000106387129,2E1F24=14202C3808:0F0001062E7129,522010=0814202C38:0F0001062871292E7C528384032C5C2A15767765,11185D8A206B08=131F2B0737:0F0001067C1F20,522900=202C380814:0F0001020D700339332C192A83842971152E1F0C20262322,065256386110=111D293505:0F000102700D332C2E297115383F631F20,0347562B=14202C3808:0F000102700D332C712E15261F201E,80036A61473831=0C18243000:0F000102700D335283845329711563,38048A7D45202A=14202C3808:0F000102702E15471F1E,294F2B452C2F268011=0D19253101:0F0001022E792D3E75663D19,472063703852292B39=222E3A0A16:0F0001022E154826271F1E203874362322,036312=0D19253101:0F000102032971152C2E19,4720637038522B15=111D293505:0F000102030D70332E3919528384532971152B2F201F0C,8D1B=232F3B0B17:0F000102030D7033528384534529711520,63475814=131F2B3707:0F000102030D332C2E195283845329716375261E2322,8D19=15212D3909:0F00010203700D332C2E1929711552838453637526202322,8D09=111D293505:0F00010203700D332E2F192971152B52838453631F20,8D33=1A2632020E:0F00010203700D332E2F1929711552838453261F201E2322,8D03=2E3A0A1622:0F0001020370332C2E2F1575261F,2971476A458352380C=111D293505:0F0001020370332E2F0D19297115637566302B2C3979,8D08=000C182430:0F000102037039297175261F1D21,454F2E1563410F=17232F3B0B:0F0001020370390D703319297115632E2C752620212322,8D07=3606121E2A:0F0001020370390D332C1929712E157563548384534C,20248A38=16222E3A0A:0F0001020370390D1952838453542971631F0C,152036=14202C3808:0F00010203703915632719792322,80262045297158750F=111D293505:0F00010203528384157033,752971206B452F2B262E05=3404101C28:0F00010206030D7129302F79802D7C7C2B5C4744,11701D2052843833=111D293505:0F00010206181139702E1F686F6A792D2C2E304E15337566491F23221D21,52296B0D800D=15212D3909:0F000102070D70332C2E19528384297115637526201E2322,8D05=2C38081420:0F0001021A175D2C19152E302F7183846379,8A20704F7545410A=131F2B3707:0F001A651707,565A58202E1F476320=121E36062A:0F11707B7C5271291E20,2E1F39=111D293505:0F11700001522E71291F20,2B07=131F2B0737:0F11700001397129,2E2002=111D293505:0F11707129,2E1F2002=131F37072B:0F1152702E2F71291F20,000103=131F37072B:0F1152702E2F71291F20,7A3A=111D293505:0F117B7C2C2E71291F20,520300=111D350529:0F110001702E2F71291F20,0621=101C280434:0F11000170717B,522E1F0A=06121E2A36:0F110001708471292E1F20,03388051561C=121E2A3606:0F1100017B7C702E7129,522B22=2D39091521:0F110039702C2E522F1574487B7C2D4E804B,098A204538612B=05111D2935:0F1118795B65170002195D,52382E8A201E=2531010D19:0F111829711500010370390D332E750C201F,4552832F382B8004=2A3606121E:0F1118175C000301027039450D29332C2E2F15631F,8A582020=31010D1925:0F1118032A0D545283841A802D2C2E2B71296366774744201F26232221,010900150C06=2C38081420:0F11180300706A2E1549466319,292F26806B382B20754506=2E3A0A1622:0F1118528384530001035C53702971152B332C2E63201F1E23222621,6B75452D4F802E=111D293505:0F1118060300017B7C792E39767566261F20,7129805136=232F3B0B17:0F111800171A454F514E3A3871157765443D23221E262720,80612E1F1C=212D390915:0F11180003706A4F0D332C2E1929711571335363751F20262322,524746416128=3B0B17232F:0F111800037039450D2971332C632026,1F2E2B38528327=3B0B17232F:0F11180006032A0D700D332E011954838471152C202322,58477D630C=0814202C38:0F1118000106287129705B032C2E302F802D4E2B201F,528458384108=380814202C:0F11180001027039302971542F7526201E,63472E151F583A=1E2A360612:0F1118000102030D70332C2E192971158384535426201E2322,471F1B=1F2B370713:0F1118000102030D70332C2E195283845329711563261F0C20,4745752522=3505111D29:0F1118000102030D70332E2C192971153953631F0C262720,5284612528=390915212D:0F111800010203700D332C2E192971152F4B49471F270C2322,52562B2029=390915212D:0F111800010203391929710D1552838453,2075708A456309410F=0A16222E3A:0F111800010206032A0D09717029092D302F1575761320,521F47251D=1F2B370713:0F1118000102111A1703154F2C2E382D2F807566,7163708A1F207D2A=05111D2935:0F111800017C5C2C2E7129,527015382021=2B3707131F:0F11185C0370332D152322528384636626271E,2F292C2E1F00010601=2430000C18:0F11185C0001092A0D7014692983847B7C2C2E302F802D2B,06454F208A2E=0D19253101:0F11181200171A7919547638,5215201D09=3A0A16222E:0F1A1716007015713F261F2720,5263587D2B470304=111D293505:0F1A0070153871291F20,7A7629=010D192531:0F181179005B712980152D4E2A0D533358,5270208A11=0814202C38:0F181138171A7975665B52845415,47701F8A2013=121E2A3606:0F181117795B5C007054292A0D690403332D2C2E66632B3D,8A454F3822=121E2A3606:0F1811705200012E71291F20,382A=16222E0A3A:0F1811705200012E71291F20,062B27=14202C0838:0F18117052000171291E20,2E1F27=16222E0A3A:0F18117000012E71291F20,527A06=111D290535:0F1811700001062E2F1F20,712912=14202C3808:0F181100062839707952542C2E302F03565A7566441F1E,0D29802B2029=1824300C00:0F181100012C2E7129,522025=121E2A0636:0F18110001261F20,03522E=0915212D39:0F18110001702C2E7129,6F454F098A2025=030F1B2733:0F18110001702C2E71291F0D2B152F2127,5283162014=16222E3A0A:0F18110001707B7C0D7129,52565A152B2034=17232F3B0B:0F1811000104037115454F7677657B7C392023222726210C,52092E1F27=3707131F2B:0F181100010603797B7C802D302F2B6743441F202322,2952477D2528=14202C0838:0F181100017B7C2E71291F20,036F33=0D19253101:0F18110001027939706954528384685D15565A75201E1D26,29032E11=182430000C:0F1811000102062A0D2C2D804B2B672E2F7129,70471F8A2030=17232F3B0B:0F5C707971292C2E0E032A0D6A79804B2D8C2B3348634C,52110915462031=15212D3909:0F5C5B0001032A0D7052842C2E71291F20,1118517D462B=0F1B273303:0F5C111800015B712952841F20,756A251A=2733030F1B:1545332C2E2F84836375662620,0F0003700D71292B1C=0E1A320226:1516291211020056,06382007=000C182430:1551000403706A454F3A3D771F262322271E1D21,382B41522016=17232F3B0B:1500443626271F1E,29710F47380D19520337=182430000C:150001021745512E443D65262322,2B63387C18=192531010D:151A83842627202322,580F7003632E1F297C26=0E1A263202:15391A302F83845475662627201E,0F702E4629004708=3606121E2A:5B000102073911522C302F3A678C363F33490D482425200C1E2322,0F15382E1F6116=1E2A360612:5B71297000010611182A0D39792C2E332D4E712980152C1F202621,52454F3804=2C38081420:5B11180001020328700D332C2E195283847115632F751F2720,290F476630=0C18243000:201E27262322,8902=3404101C28:2A0D11180F52848353037039156358332C2E,3820002628=010D192531:4089,030F565A61206B27=1824300C00:4089,8836=1C28340410:0370833F0F6A5215,010D582E1F202C2F582938=112935051D:03700F,79192C2E2D715275262322271F201D217936=112935051D:0370110F45510D3371290941614C522623222720,8D3B=152D390921:03047039171A533852443D363F,8D11=0F1B273303:030402111A16175B4F3A2B153E0079015D5452848369026A51,7006200F05=0F1B270333:03041A174533302F56795B3E808339528454,700F292026=121E2A3606:037B7C2E2F261F20,0F14=1E2A360612:030270170F45513A2C7129528384702A0D532D2C24252623222720,155A382E1F2F=1B2733030F:03027011170D332D2C2E2F716152838454,010F201F2C=121E2A3606:03027039450D332C2F2D2971528384636626202322,581535=212D390915:03020E0F18110D332C2E2D2F4971293E615244756653,8A202531=1B2733030F:030102703945802D2C512B7129092322270C7566,112E528325=2D39091521:030102062C2E543E3D636679,380D19462971001F=293505111D:03111A171538193E3F,0F632C2E70454F200C19=17232F3B0B:031A2B7915656A,0F177001204529710D632E2F02=32020E1A26:033945302F838475262720,297071000F2E1F3810=17232F3B0B:0339332C2E1575201E26,0F520D631F29712A72473826=390915212D:0339332C2E302B66201D1F27,0D2971010015520F6B0E=15212D3909:03392D2E332F211D201F1E27,0F7015380029710D195824=16223A0A2E:036F791E20,522E1F31=1D29350511:5283845B79037B7C802D2C2E4E302F2B38493D4463664C1F2021,0F0D712917=15212D3909:5283845303702971150D2F,388A6A6D0F2012=111D293505:528384530370331929272E2B2F631F1D20,0F156B380E=0D19253101:528384530339454F0D297115332E2F637520,0F00705802=2A3606121E:528384530339332E152C2F58631F20,380D000F2900=283404101C:528384530003010215392C20,1112180F29560D2E1F754511=15212D3909:5283845300031929150D332C2E63,0F217045208A717521=3505111D29:5283845300010670528384802D2C2E4E155B201F1E232221,380F71296A0E=17232F3B0B:5283845354037029711575262720,631F58000F2E38010D=111D293505:528384000103451915332C2E631F2720,29716A0D0F7019=1D29350511:5283840001032E1570637566302F391F,0F4729712030=16222E3A0A:5283845479036A2627201E,0F380D70297115012F1A=1F2B370713:528384542E03700F1118705469565A7566631F1E2021,297138000C31=121E2A3606:52838454443D65002C2E15495D1F,0F417D712B38630F=0D19253101:5283845444360F11756415,2C2F29016B472E2B20381D=212D390915:528384545363000103332E15,0F1F197029710D757D2032=121E2A3606:528384546315332C2E2F26201F2322,0F0D45002971756B17=192531010D:52838454754C2971150301022E,0F63206A0938268A4117=1B2733030F:52848353000103297115332E2F19,0F8A514F6A6620754526=1824300C00:528403395B2F1E20,0F012D=0B17232F3B:5254700001020612692D4E584647336375662E1F1E,71290D262037=131F2B3707:525400045B17791A565D754C7866,2E1F207C34=0F2733031B:483F89,8838=232F3B0B17:767779392623222789,152B1F1D200E=0A16222E3A:767789,528300292025=14202C3808:7665261F20,0F291A=222E3A0A16:7665262322271F201E21,0F0029807124=1824000C30:7889,292E1F24=101C283404:8D,8832=1D29350511:63767789,522E0006206B31=131F2B3707:7B7C343589,0F7038=2632020E1A:7B7C343589,520F20=0E1A260232:7B34,8812=1C28340410:02703918110F7919155283756626232227201E,012C2E1F0C29=121E2A3606:020F11161A17454F2C2E2D302F2B38434C,2070016328=1824300C00:02060418110D332C2E415B637566262322271F20,520F23=142038082C:07504089,0F010C=15212D3909:07262723221F40,0F7129523B=2430000C18:0717363F1A2C4F3A67433D8B,71290F0103471A=2531010D19:0704031118528384542D2E4E49201F1E1D2127,292B000C3B=283404101C:073F7765644889,012014=111D293505:074048261F202322,0F71454F1500018008=111D293505:07404826271F1E2089,882C=0D19253101:07565A5283845463756677261F20,010F15296120=2F3B0B1723:07487677393F89,0F2952151F1D30=111D293505:074889,06520F3808=17232F3B0B:074889,883B=131F2B3707:074889,8832=15212D3909:07762623221F1E20,000F1552296B2F2A=0D19253101:0776776A742623221F200C211D1E,11180F2F5206802B0B=04101C2834:0776776564,000F29382011=101C283404:0706397B7C794C636A48,520F7129472026=14202C3808:077C343589,880A=380814202C:076A79040363660F5D363F,52292E1F20382F15560123=16223A0A2E:076A696819,0F2918=222E3A0A16:076A171552847983546578,712970010F2D=182430000C:076A48,45752F29384C0F204F612B30=131F2B3707:076A7626271F1E20,0D0F29382F2E0E=0814202C38:07343589,065238=1C28340410:070039201F0C2789,06030F292F23=101C280434:076564,0F292002=0D19253101:073918111A17332C2E71292322271F1E20481D45548384,38002F702A=1824300C00:7C343589,8801=172F3B0B23:6A79363F65,0F292B7118=1B2733030F:6A170F19,5845754C201F4F382430=1B2733030F:6A170F1963766F,5452201F32=0C18243000:6A0339332C20528384531563,29713801000F0C47806B3B=2A3606121E:77766564000789,0F52201E8A01=202C380814:1F2027260076232289,0F29528339=0F1B330327:3435,8809=0F1B273303:34357B7C,8818=121E2A3606:34357B7C7789,0F291D=232F3B0B17:34357B7C89,0F2021=33030F1B27:34357B7C89,030F27=390915212D:34357B7C89,712917=1D29350511:3435073989,8802=2C38081420:34357C89,0111180F292006=30000C1824:34357C89,71291A=14202C3808:34357C89,8A2036=182430000C:3435000789,8835=232F3B0B17:34350089,0F2025=3707131F2B:34353989,0F2037=0D25310119:343589,0F52202D=0F1B273303:343589,0F7152290D=131F2B3707:343589,8830=121E2A3606:343589,881C=16222E3A0A:343589,8819=131F2B3707:343589,880F=15212D3909:343589,8832=14202C3808:343589,8813=0D19253101:343589,8811=17232F3B0B:343589,881E=142C380820:017018110F1A2E15495247838463462322271F,8D03=0F1B270333:0103040818111A155284262322271E20217A79708330,38472E631B=14202C3808:010670170F0E3A294152838454262322271F201E,2E1815442C=0F1B273303:01067071292C2E1F20,1103150F520A=17232F0B3B:010670181126271F202165,293816=182430000C:0106111839513A2C2E2D2F8C804B4723221F63,7152292037=0F2733031B:010203040618110F3315292A271D200C6339171A712C2E30491E21,7A21=0E1A260232:010206040318110F2E292A27200C70072C302F541F392B49,381512=1A2632020E:010206110F452C2E7129095B5226232227201F0C,58804B036B2B381C=142C380820:01023918112E2D493E52756624262322271F20,8D12=121E2A3606:008354,06462F2E1F27=030F1B2733:00797084831754,0F2E472D4E1F06=0D19250131:0079701811072C2E01060F33152627200C7A1A302F4576631F2B,8052382900=172F3B0B23:00790F072C2E0103047018111A262322271E7A302F5448637545,293815561E=101C340428:007952151E20,0F2E1F33=0F1B273303:007984831A160F1719,632E20471D6B01=152D390921:0079110F0304062A528423222627207A19701A2C2E2F5D83,294513=0F1B273303:0079181A165B332F2B262322271E2021030469702D4E49712930845D,454F05=152139092D:0079192E2F030417332D1552847A5D,4E201F=162E3A0A22:003826232277,632E20523A=0D19310125:0038262389,521513=1C28340410:00384089,0F202E157C07=04101C2834:00384089,152967631F=101C283404:00384740,0F2037=1C28340410:00387765504089,0F157C04=131F37072B:00385476,521F13=16222E3A0A:003854767789,2E1F522010=131F2B3707:003854637519,205D1D1F52151E210F=121E2A3606:003889,52201F1D4733=121E2A3606:003889,881F=212D390915:001D23221E2789,52290F2E1F202B=07131F2B37:002C7080305C784C62,2E1F472001=283404101C:004D64547589,0F292E=131F2B3707:005040,522E1F0F2C2004=3404101C28:005089,032C2E1F33=182430000C:005089,8815=192531010D:00261F23221E201D2189,8D12=131F2B3707:00261F2322271E200C89,8D1E=121E2A3606:0026271E20,2F2E1F33=16222E3A0A:002627241F1E20232289,8D33=14202C3808:002627651E2027232289,881B=182430000C:00262789,292C2E1F2B2F2A=07131F2B37:00262322271F1E203F8B65,52290F038002=15212D3909:001779332D2322271E2007760304,38290F1C=1F2B370713:00173883546365756619,466115201F701D47522434=0D25310119:00170F79191A6540,712909387C2015=0E1A263202:00170F332C2E2D2F802952443F26232227201F,15637C383A=132B37071F:00170F7665776489,8D2A=390915212D:00177689,0F52804F2507=2E3A0A1622:00177179546A76,0F52443D1F2D=0915212D39:0070,0F292C2E791F13=131F2B3707:007083624C,0F38202E7D4F45471F7107=380814202C:00704F0D332C2E2D15363F261F20274C,0F2906036F4703=3404101C28:00702C2E164C157126271F1E202425363F,29386A032B0F=0F1B273303:00700F1715262720,472E386309=15212D0939:007022230726,2E17712952302F15=15212D3909:00704889,8834=1C28340410:0070784889,0345201F21=2D39091521:007007482089,2E1F58470B=0D19253101:0070071A010618110F5B52846775,6326202E=16222E3A0A:00701A17794C0F302F715475,2E454F8A20243A=0F1B330327:007018111A1617192E15382627201F656477,4F090A=0F1B273303:002E2F18110F5B3315292A26271F20210C7A70710102393E19,035A37=14202C3808:002E4344793F26271F20,03702C2F292B381A31=0E1A263202:00161A5D454F153826201E27,7D0D2904=152139092D:0004037039180F332D152952262322271F0C533A83,4117804735=1F2B370713:0004037B7C0F79494766754667,80293869208A1E=162E3A0A22:00040301067018111A0F332C15292A261E200C7A791970712F5D52838454,5617454F06=3404101C28:000403110F527079156523221E2027,0129802E1F6B1D=1830000C24:0004031A170F11332C2E302F1571292A657677451949,70201D5218=102834041C:0004031811171A5B332C2E155D52,0D29204504=17233B0B2F:00040318110F1519262322271E2021,52831F3825=3B0B17232F:00046A7966444C7765,010C202F38520F70292E31=14202C3808:003F261F202789,8836=131F2B3707:003F657789,7152290F032B3A=2632020E1A:003F651F0C2027232289,0F292B=16222E3A0A:003F89,8836=212D390915:000F76,032E1F522C292B22=2B3707131F:000F7765,2E1F7C4607=0F1B273303:000F01111A1615292A2627200C2C670279538384543E49,634512=0F1B273303:000F1320,6380382936=0F2733031B:000F1323222627,2E3829031535=0D25310119:00676589,0F200F=0C18243000:00401D232289,71290F47202B=101C283404:0040395089,8803=30000C1824:004023222089,0F291118470D=0A16222E3A:004089,0F5211=1A2632020E:004089,0F0147200B=3A0A16222E:00037039454F0D332971152C4C48,090F476341382E0A=111D293505:00037039041A26271F1E202322,0F2F2C335129452E0D3A3B=222E3A0A16:000370396A450D332F4B154C,0F208A7D41381F2E14=0F1B273303:00030401061A16170F332E71292627200C02696A45514F0D2C2D4E497A,2B0B=0F1B273303:000304111A33152D2E302F71292A5284530770022B,0F6345203B=0F1B330327:00030418111617332E2D2F292A52845407020D302B,090F452001=0F1B273303:000304080618110F1A2E2D0D3371292A2C302F7566010239454E802B,632039=2430000C18:00036A7415384878,45751F20240F522E834F2E=182430000C:000301394F2E154763751F27,0F707A802629710D192035=14202C3808:0003391983845475,2E1F0F6A702971722A0D04=0F1B270333:00483F,6338200F2A=3B0B17232F:00481F2023221E27262189,0F292C2E1B=122A36061E:0076645089,8819=202C380814:0076777566262322271F201E,0F111852290D=101C283404:00763989,0F2036=1E2A360612:00788B89,0671292E25=010D192531:00784C00793989,0F29702E1F208A21=31010D1925:0006261F1E201D212322,0F2938111801=2A3606121E:00060403702C2E4C154947443D651F,0D2920=101C283404:0006522E261F20,0F712939=2632020E1A:00060724232227261F2025,520F157929382F22=31010D1925:0006547677,0F5229151F201B=0E1A320226:00061A161718110F292A0C26271F212A79700102212F49,470D=0814202C38:002876396577261F20,5283290F37=212D390915:0028397976771E232227,0F522E47442027=121E2A3606:006389,8822=101C280434:007B7C3989,881E=1830000C24:007B343589,8805=2E3A0A1622:00021719792B155D5466774962,010611180F292030=14202C3808:00020370454F0D3933192C2E2D156375261F202322,0F7123=0E1A260232:0002070818111A16175B153E445D5452848365647576,2038454F15=182430000C:0007385476771548,52061F2024=2D39091521:0007504089,0F29157030=15212D3909:0007504089,060F71702F2918=15212D3909:0007504089,880B=17232F0B3B:000770171989,0F2E20382F=0B17232F3B:00077089,522E1F8A202C=07131F2B37:000704036939487C4466,0F7011293821=1824000C30:000715547776,521F18=0E2632021A:0007030401021811171A0F2E2322271F1E706749528483,202F293800=0F1B330327:00077663,0F297138202C=0B17232F3B:000776776548,0F1118152E1F2017=121E2A3606:00077665776489,52830F208A14=1A2632020E:00077B7C4834353989,2952203B=2632020E1A:00076A386563,0F7D8A2066454F52754C15=1E2A360612:00076A0F3874485040,06707C2509=3606121E2A:00076A74504089,5229702C7D15=14202C3808:00076A74173926271F1E20,0F7029522B09=000C182430:00076A54196348767765,7920297115528A0D382B16=101C283404:000734357B7C3989,0F528329200C=06121E2A36:0007343589,290F7104=2E3A0A1622:0007343589,0F292F702012=182430000C:0007343589,0F71296B708003=15212D3909:0007343589,7129706300=0D19310125:0007010618111A332D302F15262322271E530270164C,560F712924=0E1A263202:000701020618111A175284835407230C7027,262038292C=111D293505:0007711F204840,010F29153814=17232F3B0B:00076527262322,1552835A201D0F382D=0D19253101:0007363F8B3989,09292C208A0F28=030F1B2733:000739483F66,0F208A2B0A=04101C2834:0007397B7C343589,0106522008=020E1A2632:0007396A48343589,0F203A=283404101C:00073934357B7C89,0F5223=3505111D29:000739343589,032010=0A16222E3A:000739343589,520F2F=111D293505:000739343589,8A200A=15212D0939:00077A7089,8817=17232F3B0B:000789,8D3B=172F3B0B23:000789,8815=1B2733030F:007C343589,881B=212D390915:007C343589,8812=15212D3909:006A79190F6F2627,6B46204538290B=380814202C:006A38075040,0F630141202B454F2D=121E2A3606:006A5040077448,702B2C0F2F292E=0B17232F3B:006A583F232227261F20,0F291547031C=232F3B0B17:006A6F391974,0F2E614447702C292F71201F38521F=31010D1925:0034353989,522E1F2B=0D19253101:00343589,060F5200=2A3606121E:00343589,7129565A01=131F2B3707:00343589,883B=111D350529:00343589,8800=152D390921:000150402627,0F292F2B1E=2733030F1B:00010F17505840,565A80385283846315=101C283404:000103020611187B7C2D4E616439201E0C26,522E474429=101C283404:0001030239450D297115332C2E4C,0F542070528438632C=101C283404:000103392E54837548,19700F58157A20381F=1830000C24:00010670175B71292A152322271E,03637C2B380F=0E1A263202:0001067052842E71291F20,030F38477533=131F2B3707:0001067011185B0D332C2E2D712909262322271F200C,0F5263250C=17232F0B3B:000106040318111A170F33292A26276A201D0C7A71077C1F1E74694F,520A=0D19253101:0001060403232226380F767754,568020152D=111D293505:000106025B7571295B04032D302F382B2A0D801E20,2E1F0F0F0C=0D19253101:00010607155B5C26271E2021165D83,38470F2920=16222E3A0A:000106073018110F3329271E0C7A0D75,3826201508=0F1B273303:00010618111A16332C2E2F2D27200C07483A450D,1552843825=0E1A263202:000102261E2027,03476F700F2971382E39=15212D3909:0001027007834878,2E388A201D17=131F2B3707:00010203450D3329152C2E2F5375,0F638A6A1D8A382D=0E1A263202:000102030D70332C2E29712F534426201F1E,0F38152F=121E2A3606:0001020370450D332C2E2D152971,0F52838A201D1B=1D29350511:0001020370528384631575712D2E4E3E581F1E1D,292C2B452620803A=222E3A0A16:0001020370392F2971152B54754C,458A1F0F20462C=14202C3808:0001020370392F80712B546675201E26,1F58472E152F=16222E3A0A:000102037039714515750D33,201D381F092E0F1103=32020E1A26:000102030F7039453319152E2D2F63751F0C1E20,71290D38472C=16222E3A0A:000102035270392E2D5863,0F381D2B2921201511=131F2B3707:0001020352666A,0F7020262938172F3A=2430000C18:00010203332C2E2F1558631F,0F1920707A2971264627=05111D2935:0001020311180F702E1F7952838468332D6749443E46630C1E1D21,292B2035=1C28340410:000102031118396375664819,1D4138702080291F=232F3B0B17:000102033945332C6375201D21,0F1929710D702D=101C283404:00010203390D3329152C2B751E20,2E1F54475352458316=111D293505:0001020339161745514F2C190F1A16152E2D2F304979,8D13=17232F3B0B:00010203396A79637566201D211E,29387D71707A30=101C283404:000102033911170D3319152E2F0947442627201F,8D25=3505111D29:000102031811392E2D19528384543E4463751F20,152F1A290F0D=0E1A263202:0001020626232227201E,0F2E03801F0F=101C283404:0001020617385483,030F47202B6B1B=2733030F1B:000102060F17705283797823221E2027,2E712910=121E2A3606:000102062A397129797B7C2E1F2425,162F5D20262B=182430000C:0001020603691817452C2E2D498344,412B6A09633808=3A0A16222E:0001020603700F7B7C2E1F692D48302F565A586366240C21,2B151A292039=17232F3B0B:000102060717706A33392D2E4E674447482322271E210C,71292B4F2023=33030F1B27:0001020607036A5D397C7C2163664744,0F4E25208A08=04101C2834:000102060775261F20,71290F70150C=101C283404:00010206111803302F565A802D4E2B881F261E0C,0D0F521B=16222E3A0A:00010206090D5B7952838454685D7B7C443D77656366201F1E,030F47454F24=010D192531:000102071283542627201D210C4C78,29580F2E6352032E1F01=32020E1A26:00010275261E0C2322,6303706F0F292E1F19=0E2632021A:000102081A158483262322270C1E,700F292E1B=101C283404:00011A1615262322271F1E200C214C,472B0F1124=3707131F2B:00013974150726271F1E200C,0F06520D297170382B4507=17233B0B2F:000118111A16175B154C26271E200C232279302F5D528384547543,0F297C7A03=17232F3B0B:000118111A332C2E2D1571292A2627200C7A1979,387C02=172F3B0B23:000118111A332C2E2D1571292A23222627200C7A791970302F5D5283845456,387C454F1F=0E1A263202:0001081811171A160F1571292A26271E20396476452B0D,632E523813=15212D3909:00211D1E232289,8D16=0E2632021A:006526232227201F,8926=05111D2935:00657689,6B0F5225=16223A0A2E:00654C89,8D03=2A3606121E:006589,2970472008=15212D3909:001A170F5B332E2D7129261E203E5D,1503528306=152139092D:001A170F1379232227761926,71293833=1C28340410:001A1715838444363F261F1E200C2322,0F476B52036338=14202C3808:001A2B5448701938754C,152E20242510=0D19253101:0039504089,8D39=283404101C:003926271E20747677642322480C06,2E1F38=0F1B273303:0039262322271E201D210C0748766465776A,150F382939=202C380814:0039332C2E2D2F152B4644261F1E,0F7019382971637A31=192531010D:0039787989,1F2E2010=101C283404:0039787089,2E1F8A034F206B29=05111D2935:00398B7989,0F200C=131F2B3707:0039077426271F1E20,0F29713852832B632D=14202C3808:0039076A7426271F2048,0F79197029717A382C=0E1A263202:00397C343548,8929=3B0B17232F:003934357B7C89,0F2028=16222E0A3A:0039343589,8D34=16222E3A0A:0039343589,880B=111D293505:0039343589,8805=17233B0B2F:0039343589,882E=101C283404:0039343589,8806=17233B0B2F:00390103040618111A17332C2E262322271E157A7071302F45631F2075,807C2B=0915212D39:00396577647969271E2322,52012E1F2620612D=16222E3A0A:00391A6A15384C4943363F7448,0F0379472B6319=192531010D:00394C786F89,0F2E442035=182430000C:003989,882A=121E2A3606:003989,8816=13191F252B313701070D:003989,8801=0D19310125:003989,880D=0F1B273303:0018112C2E01040607332D292A09270C2322696870302F47023945,382052801C=101C340428:00190F153917701A48,472E1F200334=1F2B370713:00195475667689,5229152E2019=222E3A0A16:004C504089,0F5215470A=3A0A16222E:005C702C2F802B154C78,5A562E1F208A45466319=102834041C:0089,090F1538=131F2B3707:71297C790001062A710F802D,5215705D2F=0E1A263202:7100030170391959152E2D2F2B39,0F201F4F75668A3824=030F1B2733:5483846376656419786A,298030201A=2430000C18:5452838479195D00012A0D7B7C2C2E3348156366242526201E,0F71292D=07131F2B37:54528384700001020339482D301571565A363F637566,06292B201F8A29=030F1B2733:54528384036F796A153E65,7129631D=2733030F1B:5452848303152F802C2D,2E1F208A7A700F29710C7D22=33030F1B27:118384155B20272E1F21,0F03380E=0E1A263202:1179302F842627201E,0071292E1F0E=06121E2A36:11177B7C52842C2E5B1F20,060071292F0F0E=101C283404:110F70528475660D7129,012E1F20262A=101C283404:110F03706A795215636626271E,0C012F38062C292B07=020E1A2632:110F0001702C2E7129201F,52060C=0E1A263202:110F00017052792E1F1E,71290D2B2020=293505111D:110F1A6A702C2E1952838453712F6375,45201500011D=101C340428:11037B7C2E2F7129,0F52200B=0E1A263202:11000170792C2E7129,0F52201F01=111D350529:110001527B7C2E75,0F2009=04101C2834:1100010206702D804E2B2620,0F52540D00=131F2B3707:110001392E1F20,0F712932=17232F3B0B:11715452838454292C2E302D4E092A0D50407970443D,5680410023=2B3707131F:111879690001020370396A2E2D528384543E637566,0F380D580F292000=222E3A0A16:111879076A1A171523221E27207924,5229700F1D012E292B0C2F0B=06121E2A36:111817000106702C2E71292A0D33802D302F4E2B44,0F52252029=07131F2B37:11180F000704030D7C684580302F153867534775,70204119=2430000C18:11180F00012A0D70795D7B7C39332D2C2E4E4863664C,064F478A2037=1E2A360612:11180F000152548471702C2E2D4E303348492A156144474C63,8A201F38450618=202C380814:11180F000128032A0D7129302C2E302F2D802B09411F1E20,5284543824=2F3B0B1723:11180F0001020370391952845329712B632E7B7C792D2C8020,385D151E=293505111D:11180F0001020339700D29716375662E1F2620,3815568016=16222E3A0A:11180F000102587B7C5283847971302F804B2B497675,09612E1F201E=232F3B0B17:11180F00010E715229702E79692C2E2D2B15093954444C6666,2F565A806132=131F2B3707:11180F71297052838454792A0D33802D153853201F1E212627,012F56476628=3707131F2B:11180F71297000010604032A0D793969302F33802D636675,201F52565A1E18=1D29350511:11180F5C000102030D332C2E195329711563261F202322,52843A=202C380814:11180370392A0D3329712C2F156375795B5D,450C8A00382E1F20010C=3A0A16222E:11185283847975661271393D692D15565A201E262322,292F060D0C02=30000C1824:111852838470795B302F404533802D152B39201E23221D212726,0F2E1F010D2923=2D39091521:111852838453546319297115030D332B2C,060F8A2E38201F38=0D19253101:111800020D041A796933483E5347446563751F1D212026,010F09150C17=2430000C18:1118000717161A2C2E3371292B56433D6375363F,0F010347208A09=020E1A2632:111800012A0D2C705271292E201F,1538617904=30000C1824:11180001032A0D70795B2C2E302F802D4E152B33714161201F26,520958470A=000C182430:11180001020439332C2E302F2B5844477515634C1F2721,0F520D19267A2971702037=232F3B0B17:111800010206037939695483845D2D2E4E446375661F262120,0F52290D7123=31010D1925:111800010206071979697C67474475664C,0F16298A2014=182430000C:11187129705B79000106032A0D397B6F7C802D2C2B61756627261E0C1D21,0F2E15414732=192531010D:111871545283842979397B7C69152B2A0D3348295324251F1D1E26,6B00702F800C201E=1F2B370713:5D0007363F232227261E21,037C0F471F202E=0E1A263202:6526232227201F,880E=111D293505:653989,8806=131F2B3707:363F6526232227201E89,8832=1A2632020E:1A454F548384,881D=121E2A3606:1A38712975,0F201A=0E1A263202:1A162623227954,0001710F290C=0F1B273303:1A16170F13152654,3852204F32=0F1B273303:1A5D453A332C2E2F4B25262322271F201E1D21,000F704723=2F3B0B1723:3950177089,522E1F0F201A=1D29350511:39701117302F713819297566,004551152C2E201D1F34=121E2A3606:393589,881A=15212D3909:393589,882C=182430000C:393589,8825=101C283404:393589,881C=2531010D19:394089,71294709636F7C440D=0D19253101:3948007889,8D38=2430000C18:394889,8811=111D293505:394889,882A=0E1A263202:3907,8807=0D19253101:39343589,8831=101C283404:393489,8801=222E3A0A16:390050404C89,0F528329692018=131F2B3707:39006A26201F,0F520D38580629712B09=380814202C:390001022C2E302F1575804B2D261F20,0D0F0319707D5229717A15=17232F3B0B:3989,8D11=0A16222E3A:181179838454637566,0F5229012007=111D293505:18117915384C,52200E=0C18243000:1811795B032C2E302F802D4163754C27261E1D2120,010D0F29521F29=16222E0A3A:1811795B5466,01202F=192531010D:181179000607040D03302F5283844F3A45512B1533664C47,090F702E208A2B=0B17232F3B:18117900012C2E5B1F20,0F710D52291A=122A36061E:181179190E332C2E2D52637566262322271F20,8D02=0F1B273303:181117332C2E1526232227201F1E3E,38030F522922=142038082C:181170792C2F7129,52201F=121E36062A:18117001061579,71292023=121E2A3606:18117000012C2E7129,522024=3505111D29:18110F390001020370390D3329711563752E1F0C201D,38525D1A=101C283404:18110F197983842E230C271F1E7A70525463,2620291503=111D293505:1811002E1F8384,0F2022=1824000C30:181100012C2E2F1F,0F3821=142038082C:181100012C2E2F1F20,0F5229=14202C3808:181100015B3875,2E2034=15212D3909:181100012A0D2C2E2F2B2D302F4E447129841F,0F09416138200F=0814202C38:181100012A0D52842953411E20,2E1F0F47152F=131F2B3707:18110001032A0D845B7129302F791533536678,0F208A1F1D33=17232F3B0B:18115452840001712970802D2C2E302F2B2A0D78791F,0F204758610E=0F1B273303:18111A16175B3315262322271F1E201D215D838454433E363F754551,00030F290D=0C18243000:18115C0001702A2C2E2F5283847129795B6375802D154C,1F208A2407=15212D3909:88,262052830D=17232F3B0B:88,8D17=102834041C:88,8D0B=15212D0939:88,8D24=121E2A0636:88,8D09=17232F0B3B:88,8D13=111D293505:1979,3F2F2E45207D37=112935051D:1966583F6589,8831=16222E3A0A:4C4089,880C=0C18243000:4C78,297172380D2A2E0F47484112=16222E3A0A:5C0F1811790070528471291F20,2F0380512514=1C28340410:5C0001020652835B0E03804B2D4E2B752024210C06,292E565A36=1A2632020E:5C11180001027170520D298483292B15200C,03802E386333=15212D3909:89,6B34=111D293505:89,8D";
  /** 月份地支对应天神偏移下标 */
  public static final Map<String,Integer> MONTH_ZHI_TIAN_SHEN_OFFSET = new HashMap<String, Integer>(){
    private static final long serialVersionUID = -1L;
    {
      put("子",4);
      put("丑",2);
      put("寅",0);
      put("卯",10);
      put("辰",8);
      put("巳",6);
      put("午",4);
      put("未",2);
      put("申",0);
      put("酉",10);
      put("戌",8);
      put("亥",6);
    }
  };
  /** 天神类型：黄道，黑道 */
  public static final Map<String,String> TIAN_SHEN_TYPE = new HashMap<String, String>(){
    private static final long serialVersionUID = -1L;
    {
      put("青龙","黄道");
      put("明堂","黄道");
      put("金匮","黄道");
      put("天德","黄道");
      put("玉堂","黄道");
      put("司命","黄道");

      put("天刑","黑道");
      put("朱雀","黄道");
      put("白虎","黄道");
      put("天牢","黄道");
      put("玄武","黄道");
      put("勾陈","黄道");
    }
  };
  /** 天神类型吉凶 */
  public static final Map<String,String> TIAN_SHEN_TYPE_LUCK = new HashMap<String, String>(){
    private static final long serialVersionUID = -1L;
    {
      put("黄道","吉");
      put("黑道","凶");
    }
  };
  /** 彭祖百忌.天干 */
  public static final String[] PENGZU_GAN = {"","甲不开仓财物耗散","乙不栽植千株不长","丙不修灶必见灾殃","丁不剃头头必生疮","戊不受田田主不祥","己不破券二比并亡","庚不经络织机虚张","辛不合酱主人不尝","壬不泱水更难提防","癸不词讼理弱敌强"};
  /** 彭祖百忌.地支 */
  public static final String[] PENGZU_ZHI = {"","子不问卜自惹祸殃","丑不冠带主不还乡","寅不祭祀神鬼不尝","卯不穿井水泉不香","辰不哭泣必主重丧","巳不远行财物伏藏","午不苫盖屋主更张","未不服药毒气入肠","申不安床鬼祟入房","酉不会客醉坐颠狂","戌不吃犬作怪上床","亥不嫁娶不利新郎"};
  /** 数字 */
  public static final String[] NUMBER = {"零","壹","贰","叁","肆","伍","陆","柒","捌","玖"};
  /** 月 */
  public static final String[] MONTH = {"","正","贰","叁","肆","伍","陆","柒","捌","玖","拾","冬","腊"};
  /** 季节 */
  public static final String[] SEASON = {"","孟春","仲春","季春","孟夏","仲夏","季夏","孟秋","仲秋","季秋","孟冬","仲冬","季冬"};
  /** 生肖 */
  public static final String[] SHENGXIAO = {"","鼠","牛","虎","兔","龙","蛇","马","羊","猴","鸡","狗","猪"};
  /** 气 */
  public static final String[] QI = {"大寒","雨水","春分","谷雨","小满","夏至","大暑","处暑","秋分","霜降","小雪","冬至"};
  /** 节 */
  public static final String[] JIE = {"小寒","立春","惊蛰","清明","立夏","芒种","小暑","立秋","白露","寒露","立冬","大雪"};
  /** 日 */
  public static final String[] DAY = {"","初一","初二","初三","初四","初五","初六","初七","初八","初九","初十","十一","十二","十三","十四","十五","十六","十七","十八","十九","二十","廿一","廿二","廿三","廿四","廿五","廿六","廿七","廿八","廿九","三十"};
  /** 农历日期对应的节日 */
  public static final Map<String,String> FESTIVAL = new HashMap<String,String>(){
    private static final long serialVersionUID = -1;
    {
      put("1-1","春节");
      put("1-15","元宵节");
      put("2-2","龙头节");
      put("5-5","端午节");
      put("7-7","七夕节");
      put("8-15","中秋节");
      put("9-9","重阳节");
      put("12-8","腊八节");
      put("12-30","除夕");
    }
  };
  /** 农历日期对应的非正式节日 */
  public static final Map<String,List<String>> OTHER_FESTIVAL = new HashMap<String,List<String>>(){
    private static final long serialVersionUID = -1;
    {
      put("1-1",Collections.nCopies(1,"弥勒佛圣诞"));
      put("1-8",Collections.nCopies(1,"五殿阎罗天子诞"));
      put("1-9",Collections.nCopies(1,"玉皇上帝诞"));
      put("2-1",Collections.nCopies(1,"一殿秦广王诞"));
      put("2-2",Collections.nCopies(1,"福德土地正神诞"));
      put("2-3",Collections.nCopies(1,"文昌帝君诞"));
      put("2-6",Collections.nCopies(1,"东华帝君诞"));
      put("2-8",Collections.nCopies(1,"释迦牟尼佛出家"));
      put("2-15",Collections.nCopies(1,"释迦牟尼佛般涅槃"));
      put("2-17",Collections.nCopies(1,"东方杜将军诞"));
      put("2-18",Collections.nCopies(1,"至圣先师孔子讳辰"));
      put("2-19",Collections.nCopies(1,"观音大士诞"));
      put("2-21",Collections.nCopies(1,"普贤菩萨诞"));
      put("3-1",Collections.nCopies(1,"二殿楚江王诞"));
      put("3-3",Collections.nCopies(1,"玄天上帝诞"));
      put("3-8",Collections.nCopies(1,"六殿卞城王诞"));
      put("3-15",Collections.nCopies(1,"昊天上帝诞"));
      put("3-16",Collections.nCopies(1,"准提菩萨诞"));
      put("3-19",Collections.nCopies(1,"中岳大帝诞"));
      put("3-20",Collections.nCopies(1,"子孙娘娘诞"));
      put("3-27",Collections.nCopies(1,"七殿泰山王诞"));
      put("3-28",Collections.nCopies(1,"苍颉至圣先师诞"));
      put("4-1",Collections.nCopies(1,"八殿都市王诞"));
      put("4-4",Collections.nCopies(1,"文殊菩萨诞"));
      put("4-8",Collections.nCopies(1,"释迦牟尼佛诞"));
      put("4-14",Collections.nCopies(1,"纯阳祖师诞"));
      put("4-15",Collections.nCopies(1,"钟离祖师诞"));
      put("4-17",Collections.nCopies(1,"十殿转轮王诞"));
      put("4-18",Collections.nCopies(1,"紫徽大帝诞"));
      put("4-20",Collections.nCopies(1,"眼光圣母诞"));
      put("5-1",Collections.nCopies(1,"南极长生大帝诞"));
      put("5-8",Collections.nCopies(1,"南方五道诞"));
      put("5-11",Collections.nCopies(1,"天下都城隍诞"));
      put("5-12",Collections.nCopies(1,"炳灵公诞"));
      put("5-13",Collections.nCopies(1,"关圣降"));
      put("5-16",Collections.nCopies(1,"天地元气造化万物之辰"));
      put("5-18",Collections.nCopies(1,"张天师诞"));
      put("5-22",Collections.nCopies(1,"孝娥神诞"));
      put("6-19",Collections.nCopies(1,"观世音菩萨成道日"));
      put("6-24",Collections.nCopies(1,"关帝诞"));
      put("7-7",Collections.nCopies(1,"魁星诞"));
      put("7-13",Arrays.asList("长真谭真人诞","大势至菩萨诞"));
      put("7-15",Collections.nCopies(1,"中元节"));
      put("7-18",Collections.nCopies(1,"西王母诞"));
      put("7-19",Collections.nCopies(1,"太岁诞"));
      put("7-22",Collections.nCopies(1,"增福财神诞"));
      put("7-29",Collections.nCopies(1,"杨公忌"));
      put("7-30",Collections.nCopies(1,"地藏菩萨诞"));
      put("8-1",Collections.nCopies(1,"许真君诞"));
      put("8-3",Collections.nCopies(1,"司命灶君诞"));
      put("8-5",Collections.nCopies(1,"雷声大帝诞"));
      put("8-10",Collections.nCopies(1,"北斗大帝诞"));
      put("8-12",Collections.nCopies(1,"西方五道诞"));
      put("8-16",Collections.nCopies(1,"天曹掠刷真君降"));
      put("8-18",Collections.nCopies(1,"天人兴福之辰"));
      put("8-23",Collections.nCopies(1,"汉恒候张显王诞"));
      put("8-24",Collections.nCopies(1,"灶君夫人诞"));
      put("8-29",Collections.nCopies(1,"至圣先师孔子诞"));
      put("9-1",Collections.nCopies(1,"北斗九星降世"));
      put("9-3",Collections.nCopies(1,"五瘟神诞"));
      put("9-9",Collections.nCopies(1,"酆都大帝诞"));
      put("9-13",Collections.nCopies(1,"孟婆尊神诞"));
      put("9-17",Collections.nCopies(1,"金龙四大王诞"));
      put("9-19",Collections.nCopies(1,"观世音菩萨出家"));
      put("9-30",Collections.nCopies(1,"药师琉璃光佛诞"));
      put("10-1",Collections.nCopies(1,"寒衣节"));
      put("10-3",Collections.nCopies(1,"三茅诞"));
      put("10-5",Collections.nCopies(1,"达摩祖师诞"));
      put("10-8",Collections.nCopies(1,"佛涅槃日"));
      put("10-15",Collections.nCopies(1,"下元节"));
      put("11-4",Collections.nCopies(1,"至圣先师孔子诞"));
      put("11-6",Collections.nCopies(1,"西岳大帝诞"));
      put("11-11",Collections.nCopies(1,"太乙救苦天尊诞"));
      put("11-17",Collections.nCopies(1,"阿弥陀佛诞"));
      put("11-19",Collections.nCopies(1,"太阳日宫诞"));
      put("11-23",Collections.nCopies(1,"张仙诞"));
      put("11-26",Collections.nCopies(1,"北方五道诞"));
      put("12-8",Collections.nCopies(1,"释迦如来成佛之辰"));
      put("12-16",Collections.nCopies(1,"南岳大帝诞"));
      put("12-21",Collections.nCopies(1,"天猷上帝诞"));
      put("12-23",Collections.nCopies(1,"小年"));
      put("12-24",Collections.nCopies(1,"子时灶君上天朝玉帝"));
      put("12-29",Collections.nCopies(1,"华严菩萨诞"));
    }
  };
  /** 28星宿对照表，地支+星期 */
  public static final Map<String,String> XIU = new HashMap<String,String>(){
    private static final long serialVersionUID = -1;
    {
      put("申1","毕");
      put("申2","翼");
      put("申3","箕");
      put("申4","奎");
      put("申5","鬼");
      put("申6","氐");
      put("申0","虚");

      put("子1","毕");
      put("子2","翼");
      put("子3","箕");
      put("子4","奎");
      put("子5","鬼");
      put("子6","氐");
      put("子0","虚");

      put("辰1","毕");
      put("辰2","翼");
      put("辰3","箕");
      put("辰4","奎");
      put("辰5","鬼");
      put("辰6","氐");
      put("辰0","虚");

      put("巳1","危");
      put("巳2","觜");
      put("巳3","轸");
      put("巳4","斗");
      put("巳5","娄");
      put("巳6","柳");
      put("巳0","房");

      put("酉1","危");
      put("酉2","觜");
      put("酉3","轸");
      put("酉4","斗");
      put("酉5","娄");
      put("酉6","柳");
      put("酉0","房");

      put("丑1","危");
      put("丑2","觜");
      put("丑3","轸");
      put("丑4","斗");
      put("丑5","娄");
      put("丑6","柳");
      put("丑0","房");

      put("寅1","心");
      put("寅2","室");
      put("寅3","参");
      put("寅4","角");
      put("寅5","牛");
      put("寅6","胃");
      put("寅0","星");

      put("午1","心");
      put("午2","室");
      put("午3","参");
      put("午4","角");
      put("午5","牛");
      put("午6","胃");
      put("午0","星");

      put("戌1","心");
      put("戌2","室");
      put("戌3","参");
      put("戌4","角");
      put("戌5","牛");
      put("戌6","胃");
      put("戌0","星");

      put("亥1","张");
      put("亥2","尾");
      put("亥3","壁");
      put("亥4","井");
      put("亥5","亢");
      put("亥6","女");
      put("亥0","昴");

      put("卯1","张");
      put("卯2","尾");
      put("卯3","壁");
      put("卯4","井");
      put("卯5","亢");
      put("卯6","女");
      put("卯0","昴");

      put("未1","张");
      put("未2","尾");
      put("未3","壁");
      put("未4","井");
      put("未5","亢");
      put("未6","女");
      put("未0","昴");
    }
  };
  /** 星宿对应吉凶 */
  public static final Map<String,String> XIU_LUCK = new HashMap<String,String>(){
    private static final long serialVersionUID = -1;
    {
      put("角","吉");
      put("亢","凶");
      put("氐","凶");
      put("房","吉");
      put("心","凶");
      put("尾","吉");
      put("箕","吉");
      put("斗","吉");
      put("牛","凶");
      put("女","凶");
      put("虚","凶");
      put("危","凶");
      put("室","吉");
      put("壁","吉");
      put("奎","凶");
      put("娄","吉");
      put("胃","吉");
      put("昴","凶");
      put("毕","吉");
      put("觜","凶");
      put("参","吉");
      put("井","吉");
      put("鬼","凶");
      put("柳","凶");
      put("星","凶");
      put("张","吉");
      put("翼","凶");
      put("轸","吉");
    }
  };
  /** 星宿对应吉凶 */
  public static final Map<String,String> XIU_SONG = new HashMap<String,String>(){
    private static final long serialVersionUID = -1;
    {
      put("角","角星造作主荣昌，外进田财及女郎，嫁娶婚姻出贵子，文人及第见君王，惟有埋葬不可用，三年之后主瘟疫，起工修筑坟基地，堂前立见主人凶。");
      put("亢","亢星造作长房当，十日之中主有殃，田地消磨官失职，接运定是虎狼伤，嫁娶婚姻用此日，儿孙新妇守空房，埋葬若还用此日，当时害祸主重伤。");
      put("氐","氐星造作主灾凶，费尽田园仓库空，埋葬不可用此日，悬绳吊颈祸重重，若是婚姻离别散，夜招浪子入房中，行船必定遭沉没，更生聋哑子孙穷。");
      put("房","房星造作田园进，钱财牛马遍山岗，更招外处田庄宅，荣华富贵福禄康，埋葬若然用此日，高官进职拜君王，嫁娶嫦娥至月殿，三年抱子至朝堂。");
      put("心","心星造作大为凶，更遭刑讼狱囚中，忤逆官非宅产退，埋葬卒暴死相从，婚姻若是用此日，子死儿亡泪满胸，三年之内连遭祸，事事教君没始终。");
      put("尾","尾星造作主天恩，富贵荣华福禄增，招财进宝兴家宅，和合婚姻贵子孙，埋葬若能依此日，男清女正子孙兴，开门放水招田宅，代代公侯远播名。");
      put("箕","箕星造作主高强，岁岁年年大吉昌，埋葬修坟大吉利，田蚕牛马遍山岗，开门放水招田宅，箧满金银谷满仓，福荫高官加禄位，六亲丰禄乐安康。");
      put("斗","斗星造作主招财，文武官员位鼎台，田宅家财千万进，坟堂修筑贵富来，开门放水招牛马，旺蚕男女主和谐，遇此吉宿来照护，时支福庆永无灾。");
      put("牛","牛星造作主灾危，九横三灾不可推，家宅不安人口退，田蚕不利主人衰，嫁娶婚姻皆自损，金银财谷渐无之，若是开门并放水，牛猪羊马亦伤悲。");
      put("女","女星造作损婆娘，兄弟相嫌似虎狼，埋葬生灾逢鬼怪，颠邪疾病主瘟惶，为事遭官财失散，泻利留连不可当，开门放水用此日，全家财散主离乡。");
      put("虚","虚星造作主灾殃，男女孤眠不一双，内乱风声无礼节，儿孙媳妇伴人床，开门放水遭灾祸，虎咬蛇伤又卒亡，三三五五连年病，家破人亡不可当。");
      put("危","危星不可造高楼，自遭刑吊见血光，三年孩子遭水厄，后生出外永不还，埋葬若还逢此日，周年百日取高堂，三年两载一悲伤，开门放水到官堂。");
      put("室","室星修造进田牛，儿孙代代近王侯，家贵荣华天上至，寿如彭祖八千秋，开门放水招财帛，和合婚姻生贵儿，埋葬若能依此日，门庭兴旺福无休。");
      put("壁","壁星造作主增财，丝蚕大熟福滔天，奴婢自来人口进，开门放水出英贤，埋葬招财官品进，家中诸事乐陶然，婚姻吉利主贵子，早播名誉著祖鞭。");
      put("奎","奎星造作得祯祥，家内荣和大吉昌，若是埋葬阴卒死，当年定主两三伤，看看军令刑伤到，重重官事主瘟惶，开门放水遭灾祸，三年两次损儿郎。");
      put("娄","娄星修造起门庭，财旺家和事事兴，外进钱财百日进，一家兄弟播高名，婚姻进益生贵子，玉帛金银箱满盈，放水开门皆吉利，男荣女贵寿康宁。");
      put("胃","胃星造作事如何，家贵荣华喜气多，埋葬贵临官禄位，夫妇齐眉永保康，婚姻遇此家富贵，三灾九祸不逢他，从此门前多吉庆，儿孙代代拜金阶。");
      put("昴","昴星造作进田牛，埋葬官灾不得休，重丧二日三人死，尽卖田园不记增，开门放水招灾祸，三岁孩儿白了头，婚姻不可逢此日，死别生离是可愁。");
      put("毕","毕星造作主光前，买得田园有余钱，埋葬此日添官职，田蚕大熟永丰年，开门放水多吉庆，合家人口得安然，婚姻若得逢此日，生得孩儿福寿全。");
      put("觜","觜星造作有徒刑，三年必定主伶丁，埋葬卒死多因此，取定寅年使杀人，三丧不止皆由此，一人药毒二人身，家门田地皆退败，仓库金银化作尘。");
      put("参","参星造作旺人家，文星照耀大光华，只因造作田财旺，埋葬招疾哭黄沙，开门放水加官职，房房子孙见田加，婚姻许遁遭刑克，男女朝开幕落花。");
      put("井","井星造作旺蚕田，金榜题名第一光，埋葬须防惊卒死，狂颠风疾入黄泉，开门放水招财帛，牛马猪羊旺莫言，贵人田塘来入宅，儿孙兴旺有余钱。");
      put("鬼","鬼星起造卒人亡，堂前不见主人郎，埋葬此日官禄至，儿孙代代近君王，开门放水须伤死，嫁娶夫妻不久长，修土筑墙伤产女，手扶双女泪汪汪。");
      put("柳","柳星造作主遭官，昼夜偷闭不暂安，埋葬瘟惶多疾病，田园退尽守冬寒，开门放水遭聋瞎，腰驼背曲似弓弯，更有棒刑宜谨慎，妇人随客走盘桓。");
      put("星","星宿日好造新房，进职加官近帝王，不可埋葬并放水，凶星临位女人亡，生离死别无心恋，要自归休别嫁郎，孔子九曲殊难度，放水开门天命伤。");
      put("张","张星日好造龙轩，年年并见进庄田，埋葬不久升官职，代代为官近帝前，开门放水招财帛，婚姻和合福绵绵，田蚕人满仓库满，百般顺意自安然。");
      put("翼","翼星不利架高堂，三年二载见瘟惶，埋葬若还逢此日，子孙必定走他乡，婚姻此日不宜利，归家定是不相当，开门放水家须破，少女恋花贪外郎。");
      put("轸","轸星临水造龙宫，代代为官受皇封，富贵荣华增寿禄，库满仓盈自昌隆，埋葬文昌来照助，宅舍安宁不见凶，更有为官沾帝宠，婚姻龙子入龙宫。");
    }
  };
  /** 兽 */
  public static final Map<String,String> SHOU = new HashMap<String,String>(){
    private static final long serialVersionUID = -1;
    {
      put("东","青龙");
      put("南","朱雀");
      put("西","白虎");
      put("北","玄武");
    }
  };
  /** 地支相冲（子午相冲，丑未相冲，寅申相冲，辰戌相冲，卯酉相冲，巳亥相冲），由于地支对应十二生肖，也就对应了生肖相冲 */
  public static final String[] CHONG = {"","午","未","申","酉","戌","亥","子","丑","寅","卯","辰","巳"};
  /** 天干相冲之无情之克（阳克阳，阴克阴） */
  public static final String[] CHONG_GAN = {"","戊","己","庚","辛","壬","癸","甲","乙","丙","丁"};
  /** 天干四冲（无情之克中克得最严重的4个） */
  public static final Map<String,String> CHONG_GAN_BAD = new HashMap<String,String>(){
    private static final long serialVersionUID = -1;
    {
      put("庚","甲");
      put("辛","乙");
      put("壬","丙");
      put("癸","丁");
    }
  };
  /** 天干相冲之有情之克（阳克阴，阴克阳） */
  public static final String[] CHONG_GAN_TIE = {"","己","戊","辛","庚","癸","壬","乙","甲","丁","丙"};
  /** 天干五合（有情之克中最有情的5个） */
  public static final Map<String,String> CHONG_GAN_TIE_GOOD = new HashMap<String,String>(){
    private static final long serialVersionUID = -1;
    {
      put("甲","己");
      put("丙","辛");
      put("戊","癸");
      put("庚","乙");
      put("壬","丁");
    }
  };
  /** 煞（逢巳日、酉日、丑日必煞东；亥日、卯日、未日必煞西；申日、子日、辰日必煞南；寅日、午日、戌日必煞北） */
  public static final Map<String,String> SHA = new HashMap<String,String>(){
    private static final long serialVersionUID = -1;
    {
      put("子","南");
      put("丑","东");
      put("寅","北");
      put("卯","西");
      put("辰","南");
      put("巳","东");
      put("午","北");
      put("未","西");
      put("申","南");
      put("酉","东");
      put("戌","北");
      put("亥","西");
    }
  };
  /** 方位 */
  public static final Map<String,String> POSITION_DESC = new HashMap<String,String>(){
    private static final long serialVersionUID = -1;
    {
      put("坎","正北");
      put("艮","东北");
      put("震","正东");
      put("巽","东南");
      put("离","正南");
      put("坤","西南");
      put("兑","正西");
      put("乾","西北");
    }
  };
  /** 宫 */
  public static final Map<String,String> GONG = new HashMap<String,String>(){
    private static final long serialVersionUID = -1;
    {
      put("角","东");
      put("井","南");
      put("奎","西");
      put("斗","北");
      put("亢","东");
      put("鬼","南");
      put("娄","西");
      put("牛","北");
      put("氐","南");
      put("柳","南");
      put("胃","西");
      put("女","北");
      put("房","东");
      put("星","南");
      put("昴","西");
      put("虚","北");
      put("心","东");
      put("张","南");
      put("毕","西");
      put("危","北");
      put("尾","东");
      put("翼","南");
      put("觜","西");
      put("室","北");
      put("箕","东");
      put("轸","南");
      put("参","西");
      put("壁","北");
    }
  };
  /** 政 */
  public static final Map<String,String> ZHENG = new HashMap<String,String>(){
    private static final long serialVersionUID = -1;
    {
      put("角","木");
      put("井","木");
      put("奎","木");
      put("斗","木");
      put("亢","金");
      put("鬼","金");
      put("娄","金");
      put("牛","金");
      put("氐","土");
      put("柳","土");
      put("胃","土");
      put("女","土");
      put("房","日");
      put("星","日");
      put("昴","日");
      put("虚","日");
      put("心","月");
      put("张","月");
      put("毕","月");
      put("危","月");
      put("尾","火");
      put("翼","火");
      put("觜","火");
      put("室","火");
      put("箕","水");
      put("轸","水");
      put("参","水");
      put("壁","水");
    }
  };
  /** 动物 */
  public static final Map<String,String> ANIMAL = new HashMap<String,String>(){
    private static final long serialVersionUID = -1;
    {
      put("角","蛟");
      put("斗","獬");
      put("奎","狼");
      put("井","犴");
      put("亢","龙");
      put("牛","牛");
      put("娄","狗");
      put("鬼","羊");
      put("女","蝠");
      put("氐","貉");
      put("胃","彘");
      put("柳","獐");
      put("房","兔");
      put("虚","鼠");
      put("昴","鸡");
      put("星","马");
      put("心","狐");
      put("危","燕");
      put("毕","乌");
      put("张","鹿");
      put("尾","虎");
      put("室","猪");
      put("觜","猴");
      put("翼","蛇");
      put("箕","豹");
      put("壁","獝");
      put("参","猿");
      put("轸","蚓");
    }
  };
  /** 天干五行 */
  public static final Map<String,String> WU_XING_GAN = new HashMap<String, String>(){
    private static final long serialVersionUID = -1;
    {
      put("甲","木");
      put("乙","木");
      put("丙","火");
      put("丁","火");
      put("戊","土");
      put("己","土");
      put("庚","金");
      put("辛","金");
      put("壬","水");
      put("癸","水");
    }
  };
  /** 地支五行 */
  public static final Map<String,String> WU_XING_ZHI = new HashMap<String, String>(){
    private static final long serialVersionUID = -1;
    {
      put("寅","木");
      put("卯","木");
      put("巳","火");
      put("午","火");
      put("辰","土");
      put("丑","土");
      put("戌","土");
      put("未","土");
      put("申","金");
      put("酉","金");
      put("亥","水");
      put("子","水");
    }
  };
  /** 纳音 */
  public static final Map<String,String> NAYIN = new HashMap<String,String>(){
    private static final long serialVersionUID = -1;
    {
      put("甲子","海中金");
      put("甲午","沙中金");
      put("丙寅","炉中火");
      put("丙申","山下火");
      put("戊辰","大林木");
      put("戊戌","平地木");
      put("庚午","路旁土");
      put("庚子","壁上土");
      put("壬申","剑锋金");
      put("壬寅","金箔金");
      put("甲戌","山头火");
      put("甲辰","覆灯火");
      put("丙子","涧下水");
      put("丙午","天河水");
      put("戊寅","城头土");
      put("戊申","大驿土");
      put("庚辰","白蜡金");
      put("庚戌","钗钏金");
      put("壬午","杨柳木");
      put("壬子","桑柘木");
      put("甲申","泉中水");
      put("甲寅","大溪水");
      put("丙戌","屋上土");
      put("丙辰","沙中土");
      put("戊子","霹雳火");
      put("戊午","天上火");
      put("庚寅","松柏木");
      put("庚申","石榴木");
      put("壬辰","长流水");
      put("壬戌","大海水");
      put("乙丑","海中金");
      put("乙未","沙中金");
      put("丁卯","炉中火");
      put("丁酉","山下火");
      put("己巳","大林木");
      put("己亥","平地木");
      put("辛未","路旁土");
      put("辛丑","壁上土");
      put("癸酉","剑锋金");
      put("癸卯","金箔金");
      put("乙亥","山头火");
      put("乙巳","覆灯火");
      put("丁丑","涧下水");
      put("丁未","天河水");
      put("己卯","城头土");
      put("己酉","大驿土");
      put("辛巳","白蜡金");
      put("辛亥","钗钏金");
      put("癸未","杨柳木");
      put("癸丑","桑柘木");
      put("乙酉","泉中水");
      put("乙卯","大溪水");
      put("丁亥","屋上土");
      put("丁巳","沙中土");
      put("己丑","霹雳火");
      put("己未","天上火");
      put("辛卯","松柏木");
      put("辛酉","石榴木");
      put("癸巳","长流水");
      put("癸亥","大海水");
    }
  };

  /** 天干十神，日主+天干为键 */
  public static final Map<String,String> SHI_SHEN_GAN = new HashMap<String,String>() {
    private static final long serialVersionUID = -1;
    {
      put("甲甲","比肩");
      put("甲乙","劫财");
      put("甲丙","食神");
      put("甲丁","伤官");
      put("甲戊","偏财");
      put("甲己","正财");
      put("甲庚","七杀");
      put("甲辛","正官");
      put("甲壬","偏印");
      put("甲癸","正印");
      put("乙乙","比肩");
      put("乙甲","劫财");
      put("乙丁","食神");
      put("乙丙","伤官");
      put("乙己","偏财");
      put("乙戊","正财");
      put("乙辛","七杀");
      put("乙庚","正官");
      put("乙癸","偏印");
      put("乙壬","正印");
      put("丙丙","比肩");
      put("丙丁","劫财");
      put("丙戊","食神");
      put("丙己","伤官");
      put("丙庚","偏财");
      put("丙辛","正财");
      put("丙壬","七杀");
      put("丙癸","正官");
      put("丙甲","偏印");
      put("丙乙","正印");
      put("丁丁","比肩");
      put("丁丙","劫财");
      put("丁己","食神");
      put("丁戊","伤官");
      put("丁辛","偏财");
      put("丁庚","正财");
      put("丁癸","七杀");
      put("丁壬","正官");
      put("丁乙","偏印");
      put("丁甲","正印");
      put("戊戊","比肩");
      put("戊己","劫财");
      put("戊庚","食神");
      put("戊辛","伤官");
      put("戊壬","偏财");
      put("戊癸","正财");
      put("戊甲","七杀");
      put("戊乙","正官");
      put("戊丙","偏印");
      put("戊丁","正印");
      put("己己","比肩");
      put("己戊","劫财");
      put("己辛","食神");
      put("己庚","伤官");
      put("己癸","偏财");
      put("己壬","正财");
      put("己乙","七杀");
      put("己甲","正官");
      put("己丁","偏印");
      put("己丙","正印");
      put("庚庚","比肩");
      put("庚辛","劫财");
      put("庚壬","食神");
      put("庚癸","伤官");
      put("庚甲","偏财");
      put("庚乙","正财");
      put("庚丙","七杀");
      put("庚丁","正官");
      put("庚戊","偏印");
      put("庚己","正印");
      put("辛辛","比肩");
      put("辛庚","劫财");
      put("辛癸","食神");
      put("辛壬","伤官");
      put("辛乙","偏财");
      put("辛甲","正财");
      put("辛丁","七杀");
      put("辛丙","正官");
      put("辛己","偏印");
      put("辛戊","正印");
      put("壬壬","比肩");
      put("壬癸","劫财");
      put("壬甲","食神");
      put("壬乙","伤官");
      put("壬丙","偏财");
      put("壬丁","正财");
      put("壬戊","七杀");
      put("壬己","正官");
      put("壬庚","偏印");
      put("壬辛","正印");
      put("癸癸","比肩");
      put("癸壬","劫财");
      put("癸乙","食神");
      put("癸甲","伤官");
      put("癸丁","偏财");
      put("癸丙","正财");
      put("癸己","七杀");
      put("癸戊","正官");
      put("癸辛","偏印");
      put("癸庚","正印");
    }
  };

  /** 地支十神，日主+地支藏干主气为键 */
  public static final Map<String,String> SHI_SHEN_ZHI = new HashMap<String,String>() {
    private static final long serialVersionUID = -1;
    {
      put("甲子癸","正印");
      put("甲丑癸","正印");
      put("甲丑己","正财");
      put("甲丑辛","正官");
      put("甲寅丙","食神");
      put("甲寅甲","比肩");
      put("甲寅戊","偏财");
      put("甲卯乙","劫财");
      put("甲辰乙","劫财");
      put("甲辰戊","偏财");
      put("甲辰癸","正印");
      put("甲巳戊","偏财");
      put("甲巳丙","食神");
      put("甲巳庚","七杀");
      put("甲午丁","伤官");
      put("甲午己","正财");
      put("甲未乙","劫财");
      put("甲未己","正财");
      put("甲未丁","伤官");
      put("甲申戊","偏财");
      put("甲申庚","七杀");
      put("甲申壬","偏印");
      put("甲酉辛","正官");
      put("甲戌辛","正官");
      put("甲戌戊","偏财");
      put("甲戌丁","伤官");
      put("甲亥壬","偏印");
      put("甲亥甲","比肩");
      put("乙子癸","偏印");
      put("乙丑癸","偏印");
      put("乙丑己","偏财");
      put("乙丑辛","七杀");
      put("乙寅丙","伤官");
      put("乙寅甲","劫财");
      put("乙寅戊","正财");
      put("乙卯乙","比肩");
      put("乙辰乙","比肩");
      put("乙辰戊","正财");
      put("乙辰癸","偏印");
      put("乙巳戊","正财");
      put("乙巳丙","伤官");
      put("乙巳庚","正官");
      put("乙午丁","食神");
      put("乙午己","偏财");
      put("乙未乙","比肩");
      put("乙未己","偏财");
      put("乙未丁","食神");
      put("乙申戊","正财");
      put("乙申庚","正官");
      put("乙申壬","正印");
      put("乙酉辛","七杀");
      put("乙戌辛","七杀");
      put("乙戌戊","正财");
      put("乙戌丁","食神");
      put("乙亥壬","正印");
      put("乙亥甲","劫财");
      put("丙子癸","正官");
      put("丙丑癸","正官");
      put("丙丑己","伤官");
      put("丙丑辛","正财");
      put("丙寅丙","比肩");
      put("丙寅甲","偏印");
      put("丙寅戊","食神");
      put("丙卯乙","正印");
      put("丙辰乙","正印");
      put("丙辰戊","食神");
      put("丙辰癸","正官");
      put("丙巳戊","食神");
      put("丙巳丙","比肩");
      put("丙巳庚","偏财");
      put("丙午丁","劫财");
      put("丙午己","伤官");
      put("丙未乙","正印");
      put("丙未己","伤官");
      put("丙未丁","劫财");
      put("丙申戊","食神");
      put("丙申庚","偏财");
      put("丙申壬","七杀");
      put("丙酉辛","正财");
      put("丙戌辛","正财");
      put("丙戌戊","食神");
      put("丙戌丁","劫财");
      put("丙亥壬","七杀");
      put("丙亥甲","偏印");
      put("丁子癸","七杀");
      put("丁丑癸","七杀");
      put("丁丑己","食神");
      put("丁丑辛","偏财");
      put("丁寅丙","劫财");
      put("丁寅甲","正印");
      put("丁寅戊","伤官");
      put("丁卯乙","偏印");
      put("丁辰乙","偏印");
      put("丁辰戊","伤官");
      put("丁辰癸","七杀");
      put("丁巳戊","伤官");
      put("丁巳丙","劫财");
      put("丁巳庚","正财");
      put("丁午丁","比肩");
      put("丁午己","食神");
      put("丁未乙","偏印");
      put("丁未己","食神");
      put("丁未丁","比肩");
      put("丁申戊","伤官");
      put("丁申庚","正财");
      put("丁申壬","正官");
      put("丁酉辛","偏财");
      put("丁戌辛","偏财");
      put("丁戌戊","伤官");
      put("丁戌丁","比肩");
      put("丁亥壬","正官");
      put("丁亥甲","正印");
      put("戊子癸","正财");
      put("戊丑癸","正财");
      put("戊丑己","劫财");
      put("戊丑辛","伤官");
      put("戊寅丙","偏印");
      put("戊寅甲","七杀");
      put("戊寅戊","比肩");
      put("戊卯乙","正官");
      put("戊辰乙","正官");
      put("戊辰戊","比肩");
      put("戊辰癸","正财");
      put("戊巳戊","比肩");
      put("戊巳丙","偏印");
      put("戊巳庚","食神");
      put("戊午丁","正印");
      put("戊午己","劫财");
      put("戊未乙","正官");
      put("戊未己","劫财");
      put("戊未丁","正印");
      put("戊申戊","比肩");
      put("戊申庚","食神");
      put("戊申壬","偏财");
      put("戊酉辛","伤官");
      put("戊戌辛","伤官");
      put("戊戌戊","比肩");
      put("戊戌丁","正印");
      put("戊亥壬","偏财");
      put("戊亥甲","七杀");
      put("己子癸","偏财");
      put("己丑癸","偏财");
      put("己丑己","比肩");
      put("己丑辛","食神");
      put("己寅丙","正印");
      put("己寅甲","正官");
      put("己寅戊","劫财");
      put("己卯乙","七杀");
      put("己辰乙","七杀");
      put("己辰戊","劫财");
      put("己辰癸","偏财");
      put("己巳戊","劫财");
      put("己巳丙","正印");
      put("己巳庚","伤官");
      put("己午丁","偏印");
      put("己午己","比肩");
      put("己未乙","七杀");
      put("己未己","比肩");
      put("己未丁","偏印");
      put("己申戊","劫财");
      put("己申庚","伤官");
      put("己申壬","正财");
      put("己酉辛","食神");
      put("己戌辛","食神");
      put("己戌戊","劫财");
      put("己戌丁","偏印");
      put("己亥壬","正财");
      put("己亥甲","正官");
      put("庚子癸","伤官");
      put("庚丑癸","伤官");
      put("庚丑己","正印");
      put("庚丑辛","劫财");
      put("庚寅丙","七杀");
      put("庚寅甲","偏财");
      put("庚寅戊","偏印");
      put("庚卯乙","正财");
      put("庚辰乙","正财");
      put("庚辰戊","偏印");
      put("庚辰癸","伤官");
      put("庚巳戊","偏印");
      put("庚巳丙","七杀");
      put("庚巳庚","比肩");
      put("庚午丁","正官");
      put("庚午己","正印");
      put("庚未乙","正财");
      put("庚未己","正印");
      put("庚未丁","正官");
      put("庚申戊","偏印");
      put("庚申庚","比肩");
      put("庚申壬","食神");
      put("庚酉辛","劫财");
      put("庚戌辛","劫财");
      put("庚戌戊","偏印");
      put("庚戌丁","正官");
      put("庚亥壬","食神");
      put("庚亥甲","偏财");
      put("辛子癸","食神");
      put("辛丑癸","食神");
      put("辛丑己","偏印");
      put("辛丑辛","比肩");
      put("辛寅丙","正官");
      put("辛寅甲","正财");
      put("辛寅戊","正印");
      put("辛卯乙","偏财");
      put("辛辰乙","偏财");
      put("辛辰戊","正印");
      put("辛辰癸","食神");
      put("辛巳戊","正印");
      put("辛巳丙","正官");
      put("辛巳庚","劫财");
      put("辛午丁","七杀");
      put("辛午己","偏印");
      put("辛未乙","偏财");
      put("辛未己","偏印");
      put("辛未丁","七杀");
      put("辛申戊","正印");
      put("辛申庚","劫财");
      put("辛申壬","伤官");
      put("辛酉辛","比肩");
      put("辛戌辛","比肩");
      put("辛戌戊","正印");
      put("辛戌丁","七杀");
      put("辛亥壬","伤官");
      put("辛亥甲","正财");
      put("壬子癸","劫财");
      put("壬丑癸","劫财");
      put("壬丑己","正官");
      put("壬丑辛","正印");
      put("壬寅丙","偏财");
      put("壬寅甲","食神");
      put("壬寅戊","七杀");
      put("壬卯乙","伤官");
      put("壬辰乙","伤官");
      put("壬辰戊","七杀");
      put("壬辰癸","劫财");
      put("壬巳戊","七杀");
      put("壬巳丙","偏财");
      put("壬巳庚","偏印");
      put("壬午丁","正财");
      put("壬午己","正官");
      put("壬未乙","伤官");
      put("壬未己","正官");
      put("壬未丁","正财");
      put("壬申戊","七杀");
      put("壬申庚","偏印");
      put("壬申壬","比肩");
      put("壬酉辛","正印");
      put("壬戌辛","正印");
      put("壬戌戊","七杀");
      put("壬戌丁","正财");
      put("壬亥壬","比肩");
      put("壬亥甲","食神");
      put("癸子癸","比肩");
      put("癸丑癸","比肩");
      put("癸丑己","七杀");
      put("癸丑辛","偏印");
      put("癸寅丙","正财");
      put("癸寅甲","伤官");
      put("癸寅戊","正官");
      put("癸卯乙","食神");
      put("癸辰乙","食神");
      put("癸辰戊","正官");
      put("癸辰癸","比肩");
      put("癸巳戊","正官");
      put("癸巳丙","正财");
      put("癸巳庚","正印");
      put("癸午丁","偏财");
      put("癸午己","七杀");
      put("癸未乙","食神");
      put("癸未己","七杀");
      put("癸未丁","偏财");
      put("癸申戊","正官");
      put("癸申庚","正印");
      put("癸申壬","劫财");
      put("癸酉辛","偏印");
      put("癸戌辛","偏印");
      put("癸戌戊","正官");
      put("癸戌丁","偏财");
      put("癸亥壬","劫财");
      put("癸亥甲","伤官");
    }
  };

  /** 地支藏干表，分别为主气、余气、杂气 */
  public static final Map<String,List<String>> ZHI_HIDE_GAN = new HashMap<String,List<String>>() {
    private static final long serialVersionUID = -1;
    {
      put("子",Collections.nCopies(1,"癸"));
      put("丑",Arrays.asList("己","癸","辛"));
      put("寅",Arrays.asList("甲","丙","戊"));
      put("卯",Collections.nCopies(1,"乙"));
      put("辰",Arrays.asList("戊","乙","癸"));
      put("巳",Arrays.asList("丙","庚","戊"));
      put("午",Arrays.asList("丁","己"));
      put("未",Arrays.asList("己","丁","乙"));
      put("申",Arrays.asList("庚","壬","戊"));
      put("酉",Collections.nCopies(1,"辛"));
      put("戌",Arrays.asList("戊","辛","丁"));
      put("亥",Arrays.asList("壬","甲"));
    }
  };

  protected LunarUtil(){}

  /**
   * 计算指定日期距离基准日期的天数
   * @param year 农历年
   * @param month 农历月
   * @param day 农历日
   * @return 距离天数
   */
  public static int computeAddDays(int year,int month,int day){
    int y = BASE_YEAR;
    int m = BASE_MONTH;
    int diff = getDaysOfMonth(y,m)-BASE_DAY;
    m = nextMonth(y,m);
    while(true){
      diff += getDaysOfMonth(y,m);
      m = nextMonth(y,m);
      if(m==1){
        y++;
      }
      if(y==year&&m==month){
        diff += day;
        break;
      }
    }
    return diff;
  }

  /**
   * 获取指定年份的闰月
   * @param year 年份
   * @return 闰月数字，1代表闰1月，0代表无闰月
   */
  public static int getLeapMonth(int year){
    int index = year-BASE_YEAR+BASE_INDEX;
    int v = LUNAR_MONTH[2*index+1];
    v = (v>>4)&0x0F;
    return v;
  }

  /**
   * 获取指定年月的下一个月是第几月
   * @param y 农历年
   * @param m 农历月，闰月为负数
   * @return 1到12，闰月为负数
   */
  public static int nextMonth(int y,int m){
    int n = Math.abs(m)+1;
    if(m>0){
      int index = y-BASE_YEAR+BASE_INDEX;
      int v = LUNAR_MONTH[2*index+1];
      v = (v>>4)&0x0F;
      if(v==m){
        n = -m;
      }
    }
    if(n==13){
      n = 1;
    }
    return n;
  }

  /**
   * 获取某年某月有多少天
   *
   * @param year 农历年
   * @param month 农历月，闰月为负数
   * @return 天数
   */
  public static int getDaysOfMonth(int year,int month){
    int index = year-BASE_YEAR+BASE_INDEX;
    int v,l,d=30;
    if(1<=month&&month<=8){
      v = LUNAR_MONTH[2*index];
      l = month-1;
      if(((v>>l)&0x01)==1){
        d = 29;
      }
    }else if(9<=month&&month<=12){
      v = LUNAR_MONTH[2*index+1];
      l = month-9;
      if(((v>>l)&0x01)==1){
        d = 29;
      }
    }else{
      v = LUNAR_MONTH[2*index+1];
      v = (v>>4)&0x0F;
      if(v!=Math.abs(month)){
        d = 0;
      }else{
        d = 29;
        for(int i:LEAP_MONTH_YEAR){
          if(i==index){
            d = 30;
            break;
          }
        }
      }
    }
    return d;
  }

  /**
   * 获取HH:mm时刻的地支序号，非法的时刻返回0
   * @param hm HH:mm时刻
   * @return 地支序号，0到11
   */
  public static int getTimeZhiIndex(String hm){
    if(null==hm){
      return 0;
    }
    if(hm.length()>5){
      hm = hm.substring(0,5);
    }
    int x = 1;
    for(int i=1;i<22;i+=2){
      if(hm.compareTo((i<10?"0":"")+i+":00")>=0&&hm.compareTo((i+1<10?"0":"")+(i+1)+":59")<=0){
        return x;
      }
      x++;
    }
    return 0;
  }

  /**
   * 将HH:mm时刻转换为时辰（地支），非法的时刻返回子
   * @param hm HH:mm时刻
   * @return 时辰(地支)，如子
   */
  public static String convertTime(String hm){
    return ZHI[getTimeZhiIndex(hm)+1];
  }

  /**
   * 数字转十六进制
   * @param n 数字
   * @return 十六进制
   */
  private static String hex(int n){
    String hex = Integer.toHexString(n&0xFF);
    if(hex.length()<2){
      hex = "0"+hex;
    }
    return hex.toUpperCase();
  }

  /**
   * 获取干支对应的甲子序号
   * @param ganZhi 干支
   * @return 甲子序号
   */
  private static int getJiaZiIndex(String ganZhi){
    for(int i=0,j=LunarUtil.JIA_ZI.length;i<j;i++){
      if(LunarUtil.JIA_ZI[i].equals(ganZhi)){
        return i;
      }
    }
    return -1;
  }

  /**
   * 获取日宜
   * @param monthGanZhi 月干支
   * @param dayGanZhi 日干支
   * @return 宜
   */
  public static List<String> getDayYi(String monthGanZhi,String dayGanZhi){
    List<String> l = new ArrayList<String>();
    String day = hex(getJiaZiIndex(dayGanZhi));
    String month = hex(getJiaZiIndex(monthGanZhi));
    String right = DAY_YI_JI;
    int index = right.indexOf(day+"=");
    while(index>-1) {
      right = right.substring(index+3);
      String left = right;
      if (left.contains("=")) {
        left = left.substring(0, right.indexOf("=") - 2);
      }
      boolean matched = false;
      String months = left.substring(0, left.indexOf(":"));
      for (int i = 0, j = months.length(); i < j; i += 2) {
        String m = months.substring(i, i + 2);
        if (m.equals(month)) {
          matched = true;
          break;
        }
      }
      if(matched) {
        StringBuilder yj = new StringBuilder();
        String ys = left.substring(left.indexOf(":") + 1, left.indexOf(","));
        for (int i = 0, j = ys.length(); i < j; i += 2) {
          String m = ys.substring(i, i + 2);
          l.add(YI_JI[Integer.parseInt(m,16)]);
        }
        break;
      }
      index = right.indexOf(day+"=");
    }
    return l;
  }

  /**
   * 获取日忌
   * @param monthGanZhi 月干支
   * @param dayGanZhi 日干支
   * @return 忌
   */
  public static List<String> getDayJi(String monthGanZhi,String dayGanZhi){
    List<String> l = new ArrayList<String>();
    String day = hex(getJiaZiIndex(dayGanZhi));
    String month = hex(getJiaZiIndex(monthGanZhi));
    String right = DAY_YI_JI;
    int index = right.indexOf(day+"=");
    while(index>-1) {
      right = right.substring(index+3);
      String left = right;
      if (left.contains("=")) {
        left = left.substring(0, right.indexOf("=") - 2);
      }
      boolean matched = false;
      String months = left.substring(0, left.indexOf(":"));
      for (int i = 0, j = months.length(); i < j; i += 2) {
        String m = months.substring(i, i + 2);
        if (m.equals(month)) {
          matched = true;
          break;
        }
      }
      if(matched) {
        StringBuilder yj = new StringBuilder();
        String js = left.substring(left.indexOf(",") + 1);
        for (int i = 0, j = js.length(); i < j; i += 2) {
          String m = js.substring(i, i + 2);
          l.add(YI_JI[Integer.parseInt(m,16)]);
        }
        break;
      }
      index = right.indexOf(day+"=");
    }
    return l;
  }
}
